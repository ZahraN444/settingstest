{
  "openapi": "3.0.0",
  "info": {
    "title": "US Payment API (Common)",
    "description": "New US Payment API supporting both CNP and CP designed by the RAFT and Express Teams.\n* Implemented **paymentMethod** + **entryMethod** approach\n\n**Revision History**\n| Date         | Who     | Description                             |\n| ------------ | ------- | ----------------------------------------|\n| 19.Oct-2023  | Dana F   | Refresh from 1.0.6, CoF as optional object vs. Entry Method |\n",
    "contact": {
      "name": "US Core/IP/ESA Payment API Team",
      "email": "tom.bruns@fisglobal.com"
    },
    "version": "1.0.8"
  },
  "servers": [
    {
      "url": "https://try.uscore.worldpay.com/api/v#/",
      "description": "US Region Enterprise Try Environment",
      "variables": {}
    },
    {
      "url": "https://uscore.worldpay.com/api/v#/",
      "description": "US Region Enterprise Production Environment",
      "variables": {}
    },
    {
      "url": "https://try.ussmb.worldpay.com/api/v#/",
      "description": "US Region SMB Try Environment",
      "variables": {}
    },
    {
      "url": "https://ussmb.worldpay.com /api/v#/",
      "description": "US Region SMB Production Environment",
      "variables": {}
    }
  ],
  "paths": {
    "/payments/{wpAuthorizationId}/authorize": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "referencedIncrementalAuth",
        "description": "You want to Increases or decreases the authorized payment amount before Capturing using an incremental authorization.\n\nScenarios:\n  * Lodging, Cruise Line, Taxi Cab and Amusement Park Merchants:  \n      * Amount that the merchant expects the cardholder to spend during the stay, voyage or trip, plus applicable taxes. \n  * Passenger Transportation, Bus and Railway Merchants:  \n      * Amount equal to the price of the cheapest journey a Cardholder can take. \n  * Vehicle Rental and Other Rental Merchants:  \n      * Cost of cardholderâ€™s intended rental period, plus taxes and mileage rates, if applicable. \n  * Grocery, Restaurant and Bar Merchants:  \n      * Actual cost of food/beverages ordered plus applicable taxes before tip. \n  * Parking and Electric Vehicle Charging:  \n      * Amount that the merchant expects the cardholder to spend for the parking or charging session\n",
        "operationId": "referencedIncrementalAuth",
        "parameters": [
          {
            "name": "wpAuthorizationId",
            "in": "path",
            "description": "The [unique authorization identifier](page:payments-101/wp-transaction-id) generated by Worldpay and returned in the original authorization response.",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 21,
              "minLength": 21,
              "type": "string",
              "example": "V1StGXR8_Z5jdHi6B-myT"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information to update (increase or decrease) the authorised payment amount by performing an **Incremental Authorization**.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentsAuthorizeRequest1"
                  },
                  {
                    "description": "The information to update (increase or decrease) the authorised payment amount by performing an **Incremental Authorization**."
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "UpdateAmounts request processed; processing will continue",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsAuthorizeResponse1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The wpPaymentId supplied is not valid.",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/payments/authorize": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "authorize",
        "description": "You want to process a Payment Authorization\n  * this confirms the validity of the account and the transaction.\n  * it also verifies that a customer has enough funds or credit to cover the amount of the transaction.\n\nNotes:  \n  * This single endpoint supports both a wide range of Payment Methods for Card Present & eCommerce (Card Not Present) requests.\n  * You can optionally Capture (for settlement) in one (1) step using the **AutoCapture** option\n  * You can also use this method for **Card verification checks** with a $0 authorization amount\n  * You can optionally perform an unreferenced incremenatal Auth by setting a processing option flag + ?\n  * If you are sending PAN, you can request that the response contains a **WorldPay Security Token** useable in future transactions.\n",
        "operationId": "authorize",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information to **Authorize** a Payment request.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentsAuthorizeRequest"
                  },
                  {
                    "description": "The information to **Authorize** a Payment request.",
                    "example": {
                      "merchantData": {
                        "merchantId": "1234567"
                      },
                      "transactionAmounts": {
                        "totalAmount": 100,
                        "currency": "USD"
                      },
                      "paymentScenario": {
                        "type": "ecommerce",
                        "paymentMethod": {
                          "type": "card/creditOrDebit",
                          "cardData": {
                            "pan": "411111xxxxxx1111",
                            "expiration": {
                              "month": 12,
                              "year": 25
                            },
                            "cvv": "123",
                            "cvvPresenceCode": "Provided"
                          },
                          "processAs": "SignatureCreditOrDebit"
                        }
                      },
                      "userDefinedFields": {
                        "discretionaryField1": "authorize-ecom-credit"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "authorize-ecom-credit": {
                  "summary": "1. ECommerce credit or debit card payment [ECOMM]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "ecommerce",
                      "paymentMethod": {
                        "type": "card/creditOrDebit",
                        "cardData": {
                          "pan": "411111xxxxxx1111",
                          "expiration": {
                            "month": 12,
                            "year": 25
                          },
                          "cvv": "123",
                          "cvvPresenceCode": "Provided"
                        },
                        "processAs": "SignatureCreditOrDebit"
                      }
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-ecom-credit"
                    }
                  }
                },
                "authorize-ecom-validate-credit": {
                  "summary": "2. ECommerce Card Validation for a credit or debit card [ECOMM]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 0,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "ecommerce",
                      "paymentMethod": {
                        "type": "card/creditOrDebit",
                        "cardData": {
                          "pan": "411111xxxxxx1111",
                          "expiration": {
                            "month": 12,
                            "year": 25
                          },
                          "cvvPresenceCode": "NotProvided"
                        },
                        "processAs": "SignatureCreditOrDebit"
                      }
                    },
                    "processingFlags": {
                      "addressVerification": true
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-ecom-validate-credit"
                    }
                  }
                },
                "authorize-ecom-token": {
                  "summary": "3. ECommerce using a OmniToken [CREDONFL?]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "ecommerce",
                      "paymentMethod": {
                        "type": "token/omni",
                        "token": "411111xxxxxx1234",
                        "credentialsOnFile": {
                          "paymentType": "CredentialsOnFile",
                          "submissionType": "Subsequent",
                          "networkTransactionId": "ABCD1234"
                        }
                      }
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-ecom-token"
                    }
                  }
                },
                "authorize-ecom-googlepay": {
                  "summary": "4. ECommerce using GooglePay [ECOMM]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "ecommerce",
                      "paymentMethod": {
                        "type": "wallet/googlePay",
                        "protocolVersion": "ECv2",
                        "signature": "MEQCIEMz6p1NIaxd3RWhnqxB4qLNbilk2M2bcK5D/pOX5RCbAiBuMqE6v91KmLVWsuCs3rQZ1z3sETdirwMCOESnAqHpiA==",
                        "signedMessage": {
                          "encryptedMessage": "d7O+KJATTzSnnI0kMRcGYhwqhz81zTJ59ER5MT7J9WXF4MO+p1DvISGop7ImWHC+Rg/g1qTG4UiYwALCUcZk+0RcudB8GkwVVn7AeNjlPYdVkMOjg/Rz6EdE5CJidClCN2ZVkvlSBaT8unCiWEZBRJtNvYmyFIznk1TpXwgGlRI0tpvDOsiCHLujxY6Y2lcvybR/Ek4aAaxBXMsF/MLNqeod619YE4ANkghcpMZ9v1G2H00eHfy+M+v/Ymnei4tYtd35R6auX1rB8DYaZe2nT/pAMywFGYbCW+OZzWiZaMqFIj/9YxDluzvFjive5ZAKnf29W8b311EJg0iTl4TWjtsWG66K+ERbArQ/2Oj2jva9PLNZsE8R4i6zVP9xkYwjQU3eMqeybAsQn7NusnyY/u5OXNSUu0+Pr0TJxs9h5pGpa373ow4tBDMQ314OfWELa5oMhcQUvkTy31wG/L8tvVw5xTzlNeSXF7w",
                          "ephemeralPublicKey": "BAePYd0+rPdBD2pNZsAFKRhLgACpxgl8CVYqNOMtk50BXQBeXBYysRA+yMy20UAHQO1d9HizJMq5Xuk5KRMDRaw=",
                          "tag": "yepmEQavrLY4lPTBQ5Wy0fr6dJWN8jsD4anD1tJPTaQ"
                        },
                        "intermediateSigningKey": {
                          "signatures": "MEUCIHWH8UdSB6rH8e02ZFFDXow0o8BH9SctHXUhrCTwHO7rAiEAw7Yi/zPEil8I17x/yBgYjYyIrusteflGldWbZXEPejs=",
                          "signedKey": {
                            "keyValue": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEV8EqFn2kyYLiu2d3STXqD14rU9bfLg4jTOxuOvLfcydZ8N4YmXdceyCY/8xQCUhqVfW+Z6yHG+3+pSYTLrnaew==",
                            "keyExpiration": "1694111846184"
                          }
                        }
                      }
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-ecom-googlepay"
                    }
                  }
                },
                "authorize-ecom-amazonpay": {
                  "summary": "5. ECommerce using AmazonPay [ECOMM]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "ecommerce",
                      "paymentMethod": {
                        "type": "wallet/amazonPay",
                        "amazonPayToken": "096405619097AMZN",
                        "chargeId": "12345",
                        "billingDescriptor": "OnlineStore",
                        "merchantOrderNumber": "1234567890",
                        "merchantID": "8675309"
                      }
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-ecom-amazonpay"
                    }
                  }
                },
                "authorize-pos-credit-emv": {
                  "summary": "6. POS credit or debit card payment (card w/ Chip inserted) [EMVCHIP]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "pos",
                      "paymentMethod": {
                        "type": "card/creditOrDebit",
                        "entryMethod": {
                          "type": "emv",
                          "keySerialNumber": "1234567890",
                          "encryptedEmvTlvData": "spihgsfgererpip9oos",
                          "emvTlvData": "84 07 A0 00 00 00 04 10 10 A5 0F 50 0A 4D 61 73 74 65 72 43 61 72 64 87 01 01",
                          "cardInputCode": "ChipRead"
                        },
                        "processAs": "SignatureCreditOrDebit"
                      },
                      "deviceCapability": "ContactlessChipReader"
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-pos-credit-emv"
                    }
                  }
                },
                "authorize-pos-credit-emv-tap": {
                  "summary": "7. POS credit or debit card payment (contactless tap) [CONTCHIP]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "pos",
                      "paymentMethod": {
                        "type": "card/creditOrDebit",
                        "entryMethod": {
                          "type": "emv",
                          "keySerialNumber": "1234567890",
                          "encryptedEmvTlvData": "spihgsfgererpip9oos",
                          "emvTlvData": "84 07 A0 00 00 00 04 10 10 A5 0F 50 0A 4D 61 73 74 65 72 43 61 72 64 87 01 01",
                          "cardInputCode": "ContactlessChipRead"
                        },
                        "processAs": "SignatureCreditOrDebit"
                      },
                      "deviceCapability": "ContactlessChipReader"
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-pos-credit-emv-tap"
                    }
                  }
                },
                "authorize-pos-credit-swipe-fallback": {
                  "summary": "8. POS credit or debit card payment (Mag Stripe fallback from EMV) [FALLBMAG]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "pos",
                      "paymentMethod": {
                        "type": "card/creditOrDebit",
                        "entryMethod": {
                          "type": "swiped",
                          "trackData": {
                            "track1": "B4000340000000504^John/Doe                  ^22251110000123000",
                            "track2": "411111xxxxxx1111=2225111123400001230"
                          },
                          "fallbackReasonCode": "MagstripeReadChipReadFailure"
                        },
                        "processAs": "SignatureCreditOrDebit"
                      },
                      "deviceCapability": "ContactlessChipReader"
                    },
                    "processingFlags": {
                      "autoCapture": false,
                      "addressVerification": true,
                      "duplicateCheck": true,
                      "partialApproval": false
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-pos-credit-swipe-fallback"
                    }
                  }
                },
                "authorize-pos-credit-emv-autocapture": {
                  "summary": "9. POS credit or debit card payment (inserted card w/ Chip) w/ Autocapture [EMVCHIP]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "pos",
                      "paymentMethod": {
                        "type": "card/creditOrDebit",
                        "entryMethod": {
                          "type": "emv",
                          "keySerialNumber": "1234567890",
                          "encryptedEmvTlvData": "spihgsfgererpip9oos",
                          "emvTlvData": "84 07 A0 00 00 00 04 10 10 A5 0F 50 0A 4D 61 73 74 65 72 43 61 72 64 87 01 01",
                          "cardInputCode": "ChipRead"
                        },
                        "processAs": "SignatureCreditOrDebit"
                      },
                      "deviceCapability": "ContactlessChipReader"
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-pos-credit-emv-autocap"
                    },
                    "processingFlags": {
                      "autoCapture": true
                    }
                  }
                },
                "authorize-pos-gift-swiped": {
                  "summary": "10. POS Gift Card payment (Mag Stripe Swiped) [SWIPED]",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "pos",
                      "paymentMethod": {
                        "type": "card/gift",
                        "entryMethod": {
                          "type": "swiped",
                          "trackData": {
                            "track1": "B4000340000000504^John/Doe                  ^22251110000123000",
                            "track2": "411111xxxxxx1111=2225111123400001230"
                          }
                        }
                      },
                      "deviceCapability": "ContactlessChipReader"
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "authorize-pos-gift-swiped"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Authorization request processed; Check response body to see if it was approved.",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaymentsAuthorizeResponse"
                    },
                    {
                      "example": {
                        "wpAuthorizationId": "V1StGXR8_Z5jdHi6B-myT",
                        "authorizeResult": {
                          "resultMessage": "Approved"
                        },
                        "authorizedAmount": {
                          "totalAmount": 1000,
                          "currency": "USD"
                        },
                        "userDefinedFields": {
                          "discretionaryField1": "authorize-approved"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "authorize-approved": {
                    "summary": "1. Authorization request was approved",
                    "value": {
                      "wpAuthorizationId": "V1StGXR8_Z5jdHi6B-myT",
                      "authorizeResult": {
                        "resultMessage": "Approved"
                      },
                      "authorizedAmount": {
                        "totalAmount": 1000,
                        "currency": "USD"
                      },
                      "userDefinedFields": {
                        "discretionaryField1": "authorize-approved"
                      }
                    }
                  },
                  "authorize-approved-autocap": {
                    "summary": "2. Authorization request was approved (w/ Autocapture)",
                    "value": {
                      "wpPaymentId": "2TvBlgycO__dkzL_5W65j",
                      "authorizeResult": {
                        "resultMessage": "Approved"
                      },
                      "authorizedAmount": {
                        "totalAmount": 1000,
                        "currency": "USD"
                      },
                      "userDefinedFields": {
                        "discretionaryField1": "authorize-approved-autocap"
                      }
                    }
                  },
                  "authorize-declined": {
                    "summary": "3. Authorization request was declined",
                    "value": {
                      "wpPaymentId": "cjQvgnofitnp8ZkC2DEC0",
                      "authorizeResult": {
                        "resultMessage": "Declined"
                      },
                      "userDefinedFields": {
                        "discretionaryField1": "authorize-declined"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/payments/capture": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Capture",
        "description": "You want to complete the authorization and initiate funds movement for partial or the full authorized amount.\n\nTo capture payments, you can use:\n  * **Automatic Capture** using an option in the /authorize method\n  * **Manual Capture** using this endpoint /capture\n  * **Batch Capture** by sending a EMD file containing a list of the all transactions you want to capture\n\nWhy would you use the manual capture method?\n  * In a ECommerce transaction you must wait to complete the authorization until after shipment.\n    * You can perform multiple captures after each partial shipment.\n  * It is common for Restaurants to use a **Capture** transaction to adjust the final amount to add a Tip.\n\nNotes:  \n  * You **DO NOT** use this endpoint if you are configured for batch file (EMD) capture or Automatic Capture!\"\n  * Before Capturing you can also **Cancel** the transaction if the customer is not going to receive the goods or services.\n",
        "operationId": "Capture",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional [idempotency key](page:payments-101/idempotency) to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information to **Capture** a Payment request.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CapturePaymentRequest"
                  },
                  {
                    "description": "The information to **Capture** a Payment request."
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Capture request processed; processing will continue",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapturePaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/payments/initiateSession": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "initiateSession",
        "description": "You want to initiate a Checkout Session\n  \n  Typically this type of Payment Authorizations includes a number of steps:  \n    1. **initiateAPMSession**:  merchants makes a call that creates a session at the APM partner and return a **redirect url**  \n    2. The merchant will redirect the customer who will interact directly with the APM partner  \n    3. At the conclusion of this interaction, the APM partner returns some information thru the customer to the merchant.  \n    4. **authorize**:  the merchant will make the normal authorize call including some information passed back from the APM  \n",
        "operationId": "initiateSession",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Initiate Session Request",
          "content": {
            "application/json": {
              "schema": {
                "description": "The information for the Initiate Session Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/payments/refund": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "refund",
        "description": "Use this endpoint if you want to return funds to your shopper.\n\nAn unreferenced operation **does** require you to supply the full payment Method details.\n\nNotes:\n* You can refund either the full captured amount or a part of the captured amount. \n* You can also perform multiple partial refunds, as long as their sum doesn't exceed the captured amount.\n",
        "operationId": "refund",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information to **Refund** an amount back to a customer.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RefundPaymentRequest"
                  },
                  {
                    "description": "The information to **Refund** an amount back to a customer.",
                    "example": {
                      "merchantData": {
                        "merchantId": "1234567"
                      },
                      "transactionAmounts": {
                        "totalAmount": 100,
                        "currency": "USD"
                      },
                      "paymentScenario": {
                        "type": "ecommerce",
                        "paymentMethod": {
                          "type": "card/creditOrDebit",
                          "processAs": "SignatureCreditOrDebit",
                          "cardData": {
                            "pan": "411111xxxxxx1111",
                            "expiration": {
                              "month": 12,
                              "year": 25
                            }
                          }
                        },
                        "secureIndicator": "NonSecureEcommerceTransaction"
                      },
                      "userDefinedFields": {
                        "discretionaryField1": "refund-credit-keyed"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "refund-credit-keyed": {
                  "summary": "Refund to a credit or debit card using Keyed (Manual Entry)",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    },
                    "paymentScenario": {
                      "type": "ecommerce",
                      "paymentMethod": {
                        "type": "card/creditOrDebit",
                        "processAs": "SignatureCreditOrDebit",
                        "cardData": {
                          "pan": "411111xxxxxx1111",
                          "expiration": {
                            "month": 12,
                            "year": 25
                          }
                        }
                      },
                      "secureIndicator": "NonSecureEcommerceTransaction"
                    },
                    "userDefinedFields": {
                      "discretionaryField1": "refund-credit-keyed"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Refund request processed; processing will continue",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/payments/{wpPaymentId}/refund": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "referencedRefund",
        "description": "Use this endpoint if you want to return funds to your shopper.\n\nA referenced operation **does not** require you to supply the payment Method details, they will be pulled from the original transaction.\n\nNotes:\n* You can refund either the full captured amount or a part of the captured amount. \n* You can also perform multiple partial refunds, as long as their sum doesn't exceed the captured amount.\n",
        "operationId": "referencedRefund",
        "parameters": [
          {
            "name": "wpPaymentId",
            "in": "path",
            "description": "The [unique payment identifier](page:payments-101/wp-transaction-id) generated by Worldpay and returned in the original authorization or capture response.",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 21,
              "minLength": 21,
              "type": "string",
              "example": "V1StGXR8_Z5jdHi6B-myT"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information to **Refund** an amount back to a customer referencing the original request",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RefundReferencedPaymentRequest"
                  },
                  {
                    "description": "The information to **Refund** an amount back to a customer referencing the original request",
                    "example": {
                      "merchantData": {
                        "merchantId": "merchantId0"
                      },
                      "transactionAmounts": {
                        "totalAmount": 100,
                        "currency": "USD"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "refund-referecned-credit-keyed": {
                  "summary": "Refund referencing the origignal Authorization Transaction",
                  "value": {
                    "merchantData": {
                      "merchantId": "merchantId0"
                    },
                    "transactionAmounts": {
                      "totalAmount": 100,
                      "currency": "USD"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Reverse request processed; processing will continue",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundReferencedPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The wpPaymentId supplied is not valid.",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/payments/{wpAuthorizationId}/capture": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "referencedCapture",
        "description": "You want to complete the authorization and initiate funds movement for partial or the full authorized amount referencing the original transaction.\n\nTo capture payments, you can use:\n  * **Automatic Capture** using an option in the /authorize method\n  * **Manual Capture** using this endpoint /capture\n  * **Batch Capture** by sending a EMD file containing a list of the all transactions you want to capture\n\nWhy would you use the manual capture method?\n  * In a ECommerce transaction you must wait to complete the authorization until after shipment.\n    * You can perform multiple captures after each partial shipment.\n  * It is common for Restaurants to use a **Capture** transaction to adjust the final amount to add a Tip.\n\nNotes:  \n  * You **DO NOT** use this endpoint if you are configured for batch file (EMD) capture or Automatic Capture!\"\n  * Before Capturing you can also **Cancel** the transaction if the customer is not going to receive the goods or services.\n",
        "operationId": "referencedCapture",
        "parameters": [
          {
            "name": "wpAuthorizationId",
            "in": "path",
            "description": "A [unique authorization identifier](page:payments-101/wp-transaction-id) generated by Worldpay and returned in the original authorization transaction.",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 21,
              "minLength": 21,
              "type": "string",
              "example": "V1StGXR8_Z5jdHi6B-myT"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional [idempotency key](page:payments-101/idempotency) to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information to **Capture** a Payment request.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CaptureReferencedPaymentRequest"
                  },
                  {
                    "description": "The information to **Capture** a Payment request."
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Capture request processed; processing will continue",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptureReferencedPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The wpPaymentId supplied is not valid.",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/payments/{wpAuthorizationOrPaymentId}/cancel": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "referencedCancel",
        "description": "You want to cancel the authorisation on a payment that has not yet been settled referencing the original transaction.\n\nSince this occurs **prior** to settlement there is no need to return any funds to the customer.\n",
        "operationId": "referencedCancel",
        "parameters": [
          {
            "name": "wpAuthorizationOrPaymentId",
            "in": "path",
            "description": "The [unique authorization or payment identifier](page:payments-101/wp-transaction-id) generated by Worldpay and returned in the original authorization or capture response.",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 21,
              "minLength": 21,
              "type": "string",
              "example": "V1StGXR8_Z5jdHi6B-myT"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information to **Cancel** a Payment request that has not been captured.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CancelReferencedPaymentRequest"
                  },
                  {
                    "description": "The information to **Cancel** a Payment request that has not been captured.",
                    "example": {
                      "merchantData": {
                        "merchantId": "1234567"
                      },
                      "reversalReason": "ClerkCancel"
                    }
                  }
                ]
              },
              "examples": {
                "cancel-referenced": {
                  "summary": "Cancel a previous Authorization (that has not been captured) using a reference to the original Authorization",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "reversalReason": "ClerkCancel"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Reverse request processed; processing will continue",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelReferencedPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The wpPaymentId supplied is not valid.",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/payments/cancel": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "cancel",
        "description": "You want to cancel the authorisation on a payment (referencing the original authorization) that has not yet been settled.\n\nSince this occurs **prior** to settlement there is no need to return any funds to the customer.\n",
        "operationId": "cancel",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information to **Cancel** a Payment request that has not been captured.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CancelPaymentRequest"
                  },
                  {
                    "description": "The information to **Cancel** a Payment request that has not been captured."
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Reverse request processed; processing will continue",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/tokens/createToken": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "CreateToken",
        "description": "",
        "operationId": "CreateToken",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Tokenize Request",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TokenizeRequest"
                  },
                  {
                    "description": "The information for the Tokenize Request",
                    "example": {
                      "merchantData": {
                        "merchantId": "1234567"
                      },
                      "dataToTokenize": {
                        "type": "card/creditOrDebit",
                        "pan": "411111xxxxxx1111",
                        "expiration": {
                          "month": 12,
                          "year": 25
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "TOKENIZE: WP Security Token": {
                  "summary": "Generate WP Security Token for Card Information",
                  "description": "This example shows generating a Security Token for Card Information",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "dataToTokenize": {
                      "type": "card/creditOrDebit",
                      "pan": "411111xxxxxx1111",
                      "expiration": {
                        "month": 12,
                        "year": 25
                      }
                    }
                  }
                },
                "TOKENIZE: WP Security Token for ACH Info": {
                  "summary": "Generate WP Security Token for ACH Info",
                  "description": "This example shows generating a Security Token for ACH Info",
                  "value": {
                    "merchantData": {
                      "merchantId": "1234567"
                    },
                    "dataToTokenize": {
                      "type": "directDebit/eCheck",
                      "accountType": "savings",
                      "routingNumber": "01234567",
                      "accountNumber": "012345678901"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TokenizeResponse"
                    },
                    {
                      "example": {}
                    }
                  ]
                },
                "examples": {
                  "TOKENIZE: WP Security Token": {
                    "summary": "Generate WP Security Token for Card Information",
                    "description": "This example shows the response to generating a Security Token for Card Information",
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/inquiries/availablePaymentMethods": {
      "post": {
        "tags": [
          "Inquiries"
        ],
        "summary": "queryPaymentMethods",
        "description": "",
        "operationId": "queryPaymentMethods",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Payment Capture Request",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentMethodsQueryRequest"
                  },
                  {
                    "description": "The information for the Payment Capture Request"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodsQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/inquiries/payments/{wpPaymentId}": {
      "post": {
        "tags": [
          "Inquiries"
        ],
        "summary": "queryPayment",
        "description": "",
        "operationId": "queryPayment",
        "parameters": [
          {
            "name": "wpPaymentId",
            "in": "path",
            "description": "A unique payment identifier generated by Worldpay and returned in the original authorization transaction.",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 21,
              "minLength": 21,
              "type": "string",
              "example": "V1StGXR8_Z5jdHi6B-myT"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Optional caller supplied [idempotency key](page:payments-101/idempotency) used to prevent duplicate request processing",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Use Correlation ID used to trace messages bewteen platforms (not exposed publically)",
            "style": "simple",
            "schema": {
              "maxLength": 36,
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Payment Query Request",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentQueryRequest"
                  },
                  {
                    "description": "The information for the Payment Query Request"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              },
              "X-Idempotent-Response": {
                "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Optional header that indicates that this response is from a previous request using the same idempotency key.",
                      "example": "false"
                    },
                    "example": "false"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (additional information will be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or Incorrect Authentication information provided)",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The wpPaymentId supplied is not valid.",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal service error (additional information may be provided in the response body)",
            "headers": {
              "X-Deployed-Version": {
                "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "Identifies the deployed major.minor.patch version of the API that answered this request.",
                      "example": "1.0.7"
                    },
                    "example": "1.0.7"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "JWTBearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "IncrementalAuthorizationPaymentRequest": {
        "title": "IncrementalAuthorizationPaymentRequest",
        "required": [
          "merchantData",
          "transactionAmounts"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "otherAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OtherAmounts1"
              },
              {}
            ]
          },
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          }
        },
        "description": "This describes the body for an Incremental Authorization request"
      },
      "PaymentMethodsQueryRequest": {
        "title": "PaymentMethodsQueryRequest",
        "required": [
          "merchantData"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          }
        }
      },
      "CaptureReferencedPaymentRequest": {
        "title": "CaptureReferencedPaymentRequest",
        "required": [
          "merchantData"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "enhancedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnhancedData1"
            },
            "description": "Additional information about the transaction that for certain types of requests can reduce your interchange cost."
          },
          "userDefindFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefindFields"
              },
              {}
            ]
          }
        }
      },
      "RefundPaymentResponse": {
        "title": "RefundPaymentResponse",
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RefundReferencedPaymentRequest": {
        "title": "RefundReferencedPaymentRequest",
        "required": [
          "merchantData"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "userDefindFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefindFields"
              },
              {}
            ]
          }
        }
      },
      "CancelReferencedPaymentRequest": {
        "title": "CancelReferencedPaymentRequest",
        "required": [
          "merchantData",
          "reversalReason"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "reversalReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReversalReasonEnum"
              },
              {}
            ]
          }
        }
      },
      "PaymentQueryRequest": {
        "title": "PaymentQueryRequest",
        "required": [
          "merchantData"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          }
        }
      },
      "PaymentQueryResponse": {
        "title": "PaymentQueryResponse",
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BasicCardData": {
        "title": "BasicCardData",
        "required": [
          "pan",
          "expiration"
        ],
        "type": "object",
        "properties": {
          "pan": {
            "type": "string",
            "description": "The Primary Account Number (PAN) on the card."
          },
          "expiration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Expiration"
              },
              {}
            ]
          },
          "cvv": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "The 3 or 4 digit Cardholder Verfication Code",
            "nullable": true
          },
          "cvvPresenceCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CVVPresenceCodeEnum"
              },
              {}
            ]
          }
        },
        "description": "Unencrypted Information about the card being used."
      },
      "BasicCardDataToTokenize": {
        "title": "BasicCardDataToTokenize",
        "required": [
          "type",
          "pan",
          "expiration"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "pan": {
            "maxLength": 19,
            "type": "string",
            "description": "The Primary Account Number (PAN) on the card."
          },
          "expiration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Expiration"
              },
              {}
            ]
          }
        },
        "description": "Information about the card being used."
      },
      "BNPLInitiateSession": {
        "title": "BNPLInitiateSession",
        "required": [
          "type",
          "bnplService"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "bnplService": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BNPLServiceEnum"
              },
              {}
            ]
          },
          "successURL": {
            "type": "string",
            "description": "A URL that can be used to redirect the consumer if a payment is **successful**."
          },
          "failureURL": {
            "type": "string",
            "description": "A URL that can be used to redirect the consumer if a payment **fails**."
          },
          "cancelURL": {
            "type": "string",
            "description": "The consumer will be redirected to this URL if the payment process is **cancelled** (if applicable)."
          },
          "confirmURL": {
            "type": "string",
            "description": "The consumer will be redirected to this URL if the payment process is **confirmed** (if applicable)."
          }
        },
        "description": "Initiate a session to pay using a **BNPL** (Buy Now Pay Later)."
      },
      "CardExpiration": {
        "title": "CardExpiration",
        "required": [
          "month",
          "year"
        ],
        "type": "object",
        "properties": {
          "month": {
            "maximum": 12.0,
            "minimum": 1.0,
            "type": "integer",
            "description": "The calendar month that the card expires.",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "description": "The calendar year that the card expires.",
            "format": "int32"
          }
        },
        "description": "Information about the expiration date for the card."
      },
      "EBTCardCNP": {
        "title": "EBTCardCNP",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "cardData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardData"
              },
              {}
            ]
          },
          "encryptedCardData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncryptedCardData"
              },
              {}
            ]
          },
          "pinData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PinData"
              },
              {}
            ]
          },
          "voucher": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "fnsNumber": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "foodstampOnly": {
            "type": "boolean"
          }
        },
        "description": "Information from the EBT Card."
      },
      "CredentialsOnFile": {
        "title": "CredentialsOnFile",
        "type": "object",
        "properties": {
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentTypeEnum"
              },
              {}
            ]
          },
          "submissionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubmissionTypeEnum"
              },
              {}
            ]
          },
          "networkTransactionId": {
            "type": "string",
            "description": "Transaction identifier returned on initial CoF authorization, provide for all subsequent CoF authorizations."
          }
        },
        "description": "Provided when a card is first tokenized for future single/recurring Card-on-File transactions and for all Card-on-File transactions."
      },
      "ECheckInitiateSession": {
        "title": "ECheckInitiateSession",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "Initiate a session to pay using **eCheck** (Direct Debit)."
      },
      "ECOMMERCE": {
        "title": "ECOMMERCE",
        "required": [
          "type",
          "paymentMethod"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "paymentMethod": {},
          "inAppPurchase": {
            "type": "boolean"
          },
          "walletType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTypeEnum"
              },
              {}
            ]
          },
          "secureIndicator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecureIndicatorEnum"
              },
              {}
            ]
          },
          "marketCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EcommerceMarketCodeEnum"
              },
              {}
            ]
          }
        },
        "description": "This type of transaction takes place when the consumer enters their credit card information onto a website or online payment gateway."
      },
      "GooglePaySignedKey": {
        "title": "GooglePaySignedKey",
        "required": [
          "keyValue",
          "keyExpiration"
        ],
        "type": "object",
        "properties": {
          "keyValue": {
            "type": "string"
          },
          "keyExpiration": {
            "type": "string"
          }
        }
      },
      "Level3Data": {
        "title": "Level3Data",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "lineItems": {
            "maxItems": 25,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            },
            "description": ""
          }
        },
        "description": "General Level 3 Line Item data."
      },
      "LodgingData": {
        "title": "LodgingData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "noShow": {
            "type": "boolean",
            "description": "Indicates if guest was a no show.",
            "example": false
          },
          "fireSafety": {
            "type": "boolean",
            "description": "Indicates whether the facility is in compliance with the Hotel and Motel Fire Safety Act of 1990 (PL101- 391), or similar legislation.",
            "example": true
          },
          "chargeDescriptor": {
            "maxLength": 6,
            "type": "string",
            "description": "A 6-digit value that identifies any additional charges that are added to the customer's card after checkout. Left justify and zero fill the value with each position containing one of the following values:  \n<br>\n| Value | Description |\n| ----- | ------------|\n| 0 | No extra charges |\n| 1 | Reserved |\n| 2 | Restaurant |\n| 3 | Gift Shop |\n| 4 | Mini Bar |\n| 5 | Telephone |\n| 6 | Other |\n| 7 | Laundry |",
            "example": "000245"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "departureDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "folioNumber": {
            "maxLength": 25,
            "type": "string",
            "description": "Lodging folio number",
            "example": "A#123455"
          },
          "propertyPhone": {
            "maxLength": 12,
            "type": "string",
            "description": "Phone number in E.164 format with no spaces, dashes, or parenthesis.",
            "example": "+18002372169"
          },
          "customerServicePhone": {
            "maxLength": 12,
            "type": "string",
            "description": "Phone number in E.164 format with no spaces, dashes, or parenthesis.",
            "example": "+18002372169"
          },
          "specialProgram": {
            "maxLength": 1,
            "type": "string",
            "description": "American Express special program code",
            "example": "X"
          },
          "numberOfAdults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32",
            "example": 2
          },
          "numberOfNights": {
            "type": "integer",
            "description": "Number of room nights",
            "format": "int32",
            "example": 6
          },
          "roomRate": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "hotelTax": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "food": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "foodBeverage": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "beverage": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "minibar": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "phone": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "movies": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "laundry": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "fitness": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "giftShop": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "parking": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "businessCenter": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "conventionCenter": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "cancellation": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "other": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          }
        },
        "description": "Data associated with lodging transactions."
      },
      "MastercardSchemeSpecificData": {
        "title": "MastercardSchemeSpecificData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "banknetRefNum": {
            "maxLength": 2,
            "type": "string",
            "description": "MasterCard Banknet Reference Number."
          },
          "merchantAdviceCod": {
            "maxLength": 199,
            "type": "string",
            "description": "Merchant Advice Codes returned from Mastercard in DE48 SE84. The data must be requested using the appropriate processing flag (MastercardAdviceCodeIndicator).\n<br>\n**Possible Values:**\n| Value | Description |\n| ----- | ------------|\n| 01 | Updated/additional information needed |\n| 02 | Cannot approve at this time, try later |\n| 03 | Do not try again |\n| 21 | Payment Cancellation |"
          },
          "rewardsText": {
            "maxLength": 2,
            "type": "string",
            "description": "MasterCard Rewards Text."
          },
          "integrityClass": {
            "maxLength": 2,
            "type": "string",
            "description": "Contains the Mastercard provided Transaction Integrity Classification for Point of Sale (POS) Purchase and Purchase with Cash Back transactions initiated on the Authorization Platform."
          }
        },
        "description": "Mastercard specfic Authorization Response Data"
      },
      "MerchantSoftDescriptors": {
        "title": "MerchantSoftDescriptors",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 25,
            "type": "string",
            "description": "Used by merchant to customize merchant name on cardholder statement.",
            "nullable": true
          },
          "city": {
            "maxLength": 13,
            "type": "string",
            "description": "Used by merchant to customize merchant city on cardholder statement."
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/USStateCodesEnum"
              },
              {}
            ]
          }
        },
        "description": "Information about the Merchant submiting this request"
      },
      "TrackData": {
        "title": "TrackData",
        "required": [
          "track1",
          "track2"
        ],
        "type": "object",
        "properties": {
          "track1": {
            "maxLength": 79,
            "type": "string",
            "nullable": true
          },
          "track2": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "track3": {
            "maxLength": 120,
            "type": "string",
            "nullable": true
          }
        }
      },
      "ApplePayWallet": {
        "title": "ApplePayWallet",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "credentialsOnFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialsOnFile1"
              },
              {}
            ]
          }
        },
        "description": "Enter information from the ApplePay integration."
      },
      "ApplicationData": {
        "title": "ApplicationData",
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string"
          },
          "applicationName": {
            "type": "string"
          },
          "applicationVersion": {
            "type": "string"
          }
        },
        "description": "Optional Information about the Application neing used to make this request."
      },
      "AuthorizeProcessingFlags": {
        "title": "AuthorizeProcessingFlags",
        "type": "object",
        "properties": {
          "autoCapture": {
            "type": "boolean",
            "description": "If true, you want to Authorise and Capture in a single step.",
            "default": false,
            "nullable": true
          },
          "addressVerification": {
            "type": "boolean",
            "description": "If true, you want to perform an address verification.",
            "default": false,
            "nullable": true
          },
          "partialApproval": {
            "type": "boolean",
            "description": "If true, you will accept approvals for less than the total requested amount.",
            "default": false,
            "nullable": true
          },
          "duplicateCheck": {
            "type": "boolean",
            "description": "If true, perform duplicate check as configured for merchant, set to false to disable duplicate check.",
            "default": true,
            "nullable": true
          },
          "deferredAuthorization": {
            "type": "boolean",
            "description": "Used to identify store and forward transactions.",
            "default": true,
            "nullable": true
          },
          "debtRepayment": {
            "type": "boolean",
            "description": "Used to identify debt repayment, valid for certain MCCs.",
            "default": true,
            "nullable": true
          },
          "estimatedAmount": {
            "type": "boolean",
            "description": "Input field required by Visa and MC to identify whether the amount submitted is an estimated amount or a final amount.",
            "default": true,
            "nullable": true
          },
          "dcc2ndPass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DCC2ndPassEnum"
              },
              {}
            ]
          },
          "billPayment": {
            "type": "boolean",
            "description": "Only truly required use of this input field is for DebitCardPINlessSale/Return methods.",
            "default": false,
            "nullable": true
          }
        },
        "description": "Options that impact how you want us to process this Authorization Request."
      },
      "BasicCardDataEncrypted": {
        "title": "BasicCardDataEncrypted",
        "required": [
          "keySerialNumber",
          "encryptedFormat",
          "encryptedData",
          "cvvPresenceCode"
        ],
        "type": "object",
        "properties": {
          "keySerialNumber": {
            "type": "string"
          },
          "encryptedFormat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardPaymentEntryMethodP2PEEncryptionFormatEnum"
              },
              {}
            ]
          },
          "encryptedData": {
            "type": "string",
            "nullable": true
          },
          "cvvPresenceCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CVVPresenceCodeEnum"
              },
              {}
            ]
          }
        },
        "description": "Encrypted Information about the card being used."
      },
      "CustomerData": {
        "title": "CustomerData",
        "type": "object",
        "properties": {
          "ssn": {
            "type": "string",
            "description": "The customer's Social Security Number (Do we still need this???)"
          },
          "dob": {
            "type": "string",
            "description": "The customer's Date of Birth (Do we still need this???)"
          },
          "billingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressInfo"
              },
              {}
            ]
          },
          "shippingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressInfo"
              },
              {}
            ]
          }
        },
        "description": "Information about the Merchant's Customer"
      },
      "DCCResult": {
        "title": "DCCResult",
        "type": "object",
        "properties": {
          "info": {
            "type": "string"
          }
        },
        "description": "Information about the response to a DCC request"
      },
      "DynamicCurrencyConversion": {
        "title": "DynamicCurrencyConversion",
        "type": "object",
        "properties": {
          "useConvertedCurrency": {
            "type": "boolean",
            "description": "Indicates whether the customer at the terminal wishes to use the rates returned to the terminal."
          },
          "dccRateRequestFirst": {
            "type": "boolean",
            "description": "indicates whether a DCC rate request should be performed before attempting to complete the current transaction."
          },
          "dccConvertedAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount converted to the cardholder's currency (DCC processing)",
            "format": "int64"
          },
          "dccConversionRate": {
            "type": "boolean",
            "description": "Rate used to convert the currency."
          },
          "dccCurrencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountCurrencyEnum"
              },
              {}
            ]
          }
        },
        "description": "Information about Dynamic Currency Conversion which can be used if the Currency of Customer's Payment Method is different then the currency of the merchant."
      },
      "ECheckInitiateSessionResponse": {
        "title": "ECheckInitiateSessionResponse",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "The response to Initiating a session to pay using **eCheck** (Direct Debit)."
      },
      "FraudResult": {
        "title": "FraudResult",
        "type": "object",
        "properties": {
          "riskStatus": {
            "type": "integer",
            "description": "If requested, the current risk status from Merchant Fraudsight will be returned.\n<br>\n  **Possible Values:**  \n  | Value | Description |\n  | ----- | ------------|\n  | 0 | Pass |\n  | 1 | Review |\n  | 2 | Fail |\n  | 3 | Unknown |\n  | 4 | Fail, informational only: Transaction approved |",
            "format": "int32"
          },
          "riskScore": {
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number",
            "description": "If requested, the current risk score from Merchant Fraudsight will be returned where the risk score is between 0.0000 and 1.0000."
          }
        },
        "description": "Results of an optional Fraud Check"
      },
      "GooglePaySignedMessage": {
        "title": "GooglePaySignedMessage",
        "required": [
          "encryptedMessage",
          "ephemeralPublicKey",
          "tag"
        ],
        "type": "object",
        "properties": {
          "encryptedMessage": {
            "type": "string"
          },
          "ephemeralPublicKey": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        }
      },
      "Keyed": {
        "title": "Keyed",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "cardData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardData"
              },
              {}
            ]
          },
          "encryptedCardData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncryptedCardData"
              },
              {}
            ]
          },
          "pinData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PinData"
              },
              {}
            ]
          },
          "fallbackReasonCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardInputKeyedFallbackReasonCodeEnum"
              },
              {}
            ]
          }
        },
        "description": "Use either CardData or EncryptedCardData (when using P2PE)"
      },
      "CreditorDebitCardPOS": {
        "title": "CreditorDebitCardPOS",
        "required": [
          "type",
          "entryMethod",
          "processAs"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "entryMethod": {},
          "processAs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardProcessAsEnum"
              },
              {}
            ]
          },
          "credentialsOnFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialsOnFile1"
              },
              {}
            ]
          },
          "returnTokenType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnTokenTypeEnum"
              },
              {}
            ]
          }
        }
      },
      "AuthorizePaymentRequest": {
        "title": "AuthorizePaymentRequest",
        "required": [
          "merchantData",
          "transactionAmounts",
          "paymentScenario"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "paymentScenario": {},
          "processingFlags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFlags"
              },
              {}
            ]
          },
          "applicationData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicationData2"
              },
              {}
            ]
          },
          "customerData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerData2"
              },
              {}
            ]
          },
          "enhancedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnhancedData1"
            },
            "description": "Additional information about the transaction that for certain types of requests can reduce your interchange cost."
          },
          "valueAddedServices": {},
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          },
          "dccData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DccData"
              },
              {}
            ]
          }
        },
        "description": "This describes the body for Authorization requests"
      },
      "AuthorizePaymentResponse": {
        "title": "AuthorizePaymentResponse",
        "required": [
          "authorizeResult"
        ],
        "type": "object",
        "properties": {
          "wpAuthorizationId": {
            "maxLength": 21,
            "minLength": 21,
            "type": "string",
            "description": "A unique reference generated by Worldpay that is used to identify a payment throughout its lifecycle.",
            "example": "V1StGXR8_Z5jdHi6B-myT"
          },
          "wpPaymentId": {
            "maxLength": 21,
            "minLength": 21,
            "type": "string",
            "description": "A unique reference generated by Worldpay that is used to identify a payment throughout its lifecycle.",
            "example": "V1StGXR8_Z5jdHi6B-myT"
          },
          "authorizeResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizeResult"
              },
              {}
            ]
          },
          "authorizedAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizedAmount"
              },
              {}
            ]
          },
          "avsResult": {
            "type": "string",
            "description": "Optional response if you request an AVS Check\n<br>\n  **Possible Values:**  \n  | Value | Description |  \n  | ----- | ------------|  \n  | A | Address Matches, ZIP does not |\n  | B | Address Matches, ZIP not verified |\n  | C | Address an ZIP not verified |\n  | D | Address and postal code match, international AVS only |\n  | E | Edit Error or ineligible |\n  | F | Address and ZIP match - UK only |\n  | G | Address not verified - international |\n  | I | Address not verified |\n  | M | Address and postal code match, international AVS only |\n  | N | Neither address nor ZIP match |\n  | P | Codes match, addresses not verified |\n  | R | System unavailable or time-out |\n  | S | AVS not supported |\n  | U | Address info N/A |\n  | W | Nine digit zip matches, not address |\n  | X | Address and nine digit zip match, domestic AVS only |\n  | Y | Address and five digit zip match, domestic AVS only |\n  | Z | ZIP matches, address does not |"
          },
          "tokenData": {},
          "schemeSpecificData": {},
          "dccResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DccResult2"
              },
              {}
            ]
          },
          "fraudResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FraudResult2"
              },
              {}
            ]
          },
          "accountUpdaterData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountUpdaterData2"
              },
              {}
            ]
          },
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          }
        },
        "description": "This describes the response to a Payment Authorization request"
      },
      "IncrementalAuthorizationPaymentResponse": {
        "title": "IncrementalAuthorizationPaymentResponse",
        "type": "object",
        "properties": {
          "wpAuthorizationId": {
            "type": "string",
            "description": "The unique original authorization identifier generated by Worldpay.",
            "nullable": true
          },
          "authorizeResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizeResult"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          }
        },
        "description": "This describes the body for an Incremental Authorization response"
      },
      "CapturePaymentResponse": {
        "title": "CapturePaymentResponse",
        "type": "object",
        "properties": {
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          }
        }
      },
      "RefundReferencedPaymentResponse": {
        "title": "RefundReferencedPaymentResponse",
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CancelReferencedPaymentResponse": {
        "title": "CancelReferencedPaymentResponse",
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ACH": {
        "title": "ACH",
        "required": [
          "type",
          "paymentMethod"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "paymentMethod": {}
        },
        "description": "This type of transaction is used for electronic funds transfer, eCheck, physical check, or direct debit."
      },
      "AirlineData": {
        "title": "AirlineData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "Data associated with airline travel."
      },
      "AssuredUserAccountData": {
        "title": "AssuredUserAccountData",
        "type": "object",
        "properties": {
          "userAccountNumber": {
            "maxLength": 40,
            "type": "string",
            "description": "Account number for user"
          },
          "userAccountCreationDate": {
            "maxLength": 19,
            "type": "string",
            "description": "Date account was created"
          },
          "userAccountEmail": {
            "maxLength": 40,
            "type": "string",
            "description": "E-mail address for user associated with account"
          },
          "userAccountName": {
            "maxLength": 40,
            "type": "string",
            "description": "User name on account"
          },
          "userAccountPhoneNumber": {
            "maxLength": 15,
            "type": "string",
            "description": "Phone number on account"
          }
        }
      },
      "AuthorizeResult": {
        "title": "AuthorizeResult",
        "type": "object",
        "properties": {
          "resultMessage": {
            "maxLength": 10,
            "type": "string",
            "description": "This field contains the result of the Payment Authorization request.\n<br>\n  **Possible Values:**\n  | Value | Description |\n  | ----- | ------------|\n  | APPROVED | Payment Authorization was **approved** |\n  | DECLINED| Payment Authorization was **declined** |"
          },
          "approvalCode": {
            "maxLength": 6,
            "type": "string",
            "description": "Approval Code returned from the payment processor."
          }
        }
      },
      "BasicPinData": {
        "title": "BasicPinData",
        "required": [
          "pinBlock",
          "keySerialNumber"
        ],
        "type": "object",
        "properties": {
          "pinBlock": {
            "type": "string",
            "description": "A block of data used to encapsulate a PIN during processing."
          },
          "keySerialNumber": {
            "type": "string",
            "description": "Key Serial Number."
          }
        },
        "description": "A Personal Identification Code (PIN) is a security code usaully asssociated to a debit card."
      },
      "DirectDebit": {
        "title": "DirectDebit",
        "required": [
          "type",
          "accountType",
          "routingNumber",
          "accountNumber"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "accountType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ECheckPaymentMethodAccountTypeEnum"
              },
              {}
            ]
          },
          "routingNumber": {
            "maxLength": 9,
            "type": "string",
            "description": "The routing number is a 9-digit number on the left of the two number codes and identifies the exact bank where the account is located."
          },
          "accountNumber": {
            "maxLength": 12,
            "type": "string",
            "description": "The Account Number is the customer's 10-digit Demand Deposit Account number."
          }
        },
        "description": "This payment method pulls funds directly from a Customer's Bank Account."
      },
      "DiscoverSchemeSpecificData": {
        "title": "DiscoverSchemeSpecificData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "transactionId": {
            "maxLength": 15,
            "type": "string",
            "description": "Discover Reference Number."
          },
          "processingCode": {
            "maxLength": 6,
            "type": "string",
            "description": "Discover Processing Code."
          },
          "traceNumber": {
            "maxLength": 6,
            "type": "string",
            "description": "Discover Sequence Number."
          },
          "entryMode": {
            "maxLength": 2,
            "type": "string",
            "description": "Discover Entry Mode."
          },
          "pinCapability": {
            "maxLength": 1,
            "type": "string",
            "description": "Discover PIN Capability."
          },
          "trackStatusCode": {
            "maxLength": 2,
            "type": "string",
            "description": "Discover Track Status Code."
          },
          "posDataCodes": {
            "maxLength": 13,
            "type": "string",
            "description": "Discover POS Data Codes."
          },
          "responseCode": {
            "maxLength": 2,
            "type": "string",
            "description": "Discover Response Code."
          }
        },
        "description": "Discover specfic Authorization Response Data"
      },
      "EbtSchemeSpecificData": {
        "title": "EbtSchemeSpecificData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "SpecialProgramCaseKey": {
            "type": "string"
          },
          "AdditonalTraceData": {
            "type": "string"
          }
        },
        "description": "EBT Card specific response data."
      },
      "ECHECK": {
        "title": "ECHECK",
        "required": [
          "type",
          "accountType",
          "routingNumber",
          "accountNumber"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "accountType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ECheckPaymentMethodAccountTypeEnum"
              },
              {}
            ]
          },
          "routingNumber": {
            "maxLength": 9,
            "type": "string",
            "description": "The routing number is a 9-digit number on the left of the two number codes and identifies the exact bank where the account is located."
          },
          "accountNumber": {
            "maxLength": 12,
            "type": "string",
            "description": "The Account Number is the customer's 10-digit Demand Deposit Account number."
          },
          "checkNumber": {
            "type": "integer",
            "description": "The number identifying the check.",
            "format": "int32",
            "nullable": true
          }
        },
        "description": "This payment method allows a customer to pay using a Check associated with a Bank Account."
      },
      "GooglePayWallet": {
        "title": "GooglePayWallet",
        "required": [
          "type",
          "protocolVersion",
          "signature",
          "signedMessage",
          "intermediateSigningKey"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "protocolVersion": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "signedMessage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GooglePaySignedMessage"
              },
              {}
            ]
          },
          "intermediateSigningKey": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GooglePayIntermediateSigningKey"
              },
              {}
            ]
          },
          "credentialsOnFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialsOnFile1"
              },
              {}
            ]
          }
        },
        "description": "Enter information from the GooglePay integration."
      },
      "HealthCareData": {
        "title": "HealthCareData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "transitAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "healthCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "prescriptionCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "visionCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "clinicCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "dentalCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          }
        },
        "description": "Data associated wit Healthcare transactions."
      },
      "EMV": {
        "title": "EMV",
        "required": [
          "type",
          "keySerialNumber",
          "encryptedEmvTlvData",
          "emvTlvData"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "keySerialNumber": {
            "type": "string"
          },
          "encryptedEmvTlvData": {
            "type": "string"
          },
          "emvTlvData": {
            "type": "string"
          },
          "pinData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PinData"
              },
              {}
            ]
          },
          "cardInputCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EMVCardInputCodeEnum"
              },
              {}
            ]
          },
          "kernelVersion": {
            "type": "string",
            "description": "EMV Kernel version of the device."
          }
        }
      },
      "POS": {
        "title": "POS",
        "required": [
          "type",
          "paymentMethod"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "paymentMethod": {},
          "marketCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/POSMarketCodeEnum"
              },
              {}
            ]
          },
          "laneNumber": {
            "maxLength": 3,
            "type": "string",
            "description": "Lane/Register Number"
          },
          "deviceSerialNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "The Serial Number (S/N) of the device/terminal.",
            "nullable": true
          },
          "deviceModel": {
            "maxLength": 20,
            "type": "string",
            "description": "The model number of the device/terminal.",
            "nullable": true
          },
          "softPOSID": {
            "maxLength": 20,
            "type": "string",
            "description": "An identifier when a contactless payment is accepted on a mobile device/smartphone.",
            "nullable": true
          },
          "deviceCapability": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentAcceptanceDeviceCapabilitiesEnum"
              },
              {}
            ]
          },
          "deviceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentAcceptanceTerminalTypeEnum"
              },
              {}
            ]
          },
          "deviceEnvironment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentAcceptanceDeviceEnvironmentEnum"
              },
              {}
            ]
          },
          "clerkId": {
            "maxLength": 10,
            "type": "string",
            "description": "Allows integrator to track employee accepting this payment.",
            "nullable": true
          },
          "shiftId": {
            "maxLength": 10,
            "type": "string",
            "description": "Allows integrator to associate this payment with an employee shift.",
            "nullable": true
          }
        },
        "description": "This type of transaction takes place when the Card is present and either swiped, keyed, inserted into or tapped on the terminal."
      },
      "ProcessingMetadata": {
        "title": "ProcessingMetadata",
        "type": "object",
        "properties": {
          "processedAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processingElapsedMs": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "processingStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingStatusEnum"
              },
              {}
            ]
          }
        }
      },
      "CapturePaymentRequest": {
        "title": "CapturePaymentRequest",
        "required": [
          "merchantData",
          "transactionAmounts",
          "paymentScenario"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "paymentScenario": {},
          "enhancedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnhancedData1"
            },
            "description": "Additional information about the transaction that for certain types of requests can reduce your interchange cost."
          },
          "userDefindFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefindFields"
              },
              {}
            ]
          }
        }
      },
      "CaptureReferencedPaymentResponse": {
        "title": "CaptureReferencedPaymentResponse",
        "type": "object",
        "properties": {
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          }
        }
      },
      "RefundPaymentRequest": {
        "title": "RefundPaymentRequest",
        "required": [
          "merchantData",
          "transactionAmounts",
          "paymentScenario"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "paymentScenario": {},
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          }
        }
      },
      "CancelPaymentRequest": {
        "title": "CancelPaymentRequest",
        "required": [
          "merchantData",
          "paymentScenario",
          "reversalReason"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "paymentScenario": {},
          "reversalReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReversalReasonEnum"
              },
              {}
            ]
          }
        }
      },
      "CancelPaymentResponse": {
        "title": "CancelPaymentResponse",
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TokenizeRequest": {
        "title": "TokenizeRequest",
        "required": [
          "merchantData",
          "dataToTokenize"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "dataToTokenize": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BasicCardDataToTokenize"
              },
              {
                "$ref": "#/components/schemas/ECHECK"
              }
            ],
            "description": "The type and required details of data to tokenize"
          }
        }
      },
      "TokenizeResponse": {
        "title": "TokenizeResponse",
        "type": "object",
        "properties": {
          "tokenValue": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaymentMethodsQueryResponse": {
        "title": "PaymentMethodsQueryResponse",
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AccountUpdaterData": {
        "title": "AccountUpdaterData",
        "type": "object",
        "properties": {
          "replacementPAN": {
            "maxLength": 20,
            "type": "string",
            "description": "This field contains the replacement PAN."
          },
          "replacementExpirationDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReplacementExpirationDate"
              },
              {}
            ]
          },
          "accountStatus": {
            "maxLength": 1,
            "type": "string",
            "description": "This field contains one of the following values from the network if available.\n<br>\n  **Possible Values:**\n  | Value | Description |\n  | ----- | ------------|\n  | C | Closed Account |\n  | E | Expiration Date updated |\n  | Q | Contact Cardholder |"
          },
          "errorCodes": {
            "maxLength": 6,
            "type": "string",
            "description": "This field contains one of the following error codes from the network if available.\n<br>\n  **Possible Values:**\n  | Value | Description |\n  | ----- | ------------|\n  | VAU001 | Transaction did not qualify because the transaction contains token |\n  | VAU002 | Real Time AU is supported only for branded PAN |\n  | VAU003 | Real Time AU is not supported for this network |\n  | VAU004 | Transaction is not original purchase or bill payment |\n  | VAU005 | Transaction contains CVV2 |\n  | VAU006 | Transaction is not a qualifying transaction type |\n  | VAU007 | Real Time AU is not supported for this Merchant Category Code (MCC) |\n  | VAU008 | Acquirer of processor is not activated for Real Time VAU |\n  | VAU009 | Issuer does not support Real Time AU |\n  | VAU010 | Issuer or Visa blocked the merchant |\n  | VAU011 | Pre-authorized Payment Cancellation Service (PPCS) stop payment order for this transaction |\n  | VAU012 | Credentials in the authorization request is the latest AU data |\n<br>\n  Note Values could be added at any time and your client should not throw an exception for unknown values."
          }
        },
        "description": "Optional information if you are enabled for in-line account updater"
      },
      "AmazonPayWallet": {
        "title": "AmazonPayWallet",
        "required": [
          "type",
          "chargeId",
          "amazonPayToken",
          "billingDescriptor",
          "merchantOrderNumber",
          "merchantID"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "chargeId": {
            "maxLength": 27,
            "type": "string",
            "description": "ID of the Charge object created at Amazon Pay."
          },
          "amazonPayToken": {
            "maxLength": 16,
            "type": "string",
            "description": "The Amazon Pay Token"
          },
          "billingDescriptor": {
            "maxLength": 22,
            "type": "string",
            "description": "The description to be shown on the buyer's payment statement. For a payment, it should be passed either during authorization or capture."
          },
          "merchantOrderNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "This field contains the order number associated with the transaction. Any inquiries regarding the transactions should use this value."
          },
          "merchantID": {
            "maxLength": 255,
            "type": "string",
            "description": "Amazon will use this value to verify the ownership of the Amazon Pay token."
          },
          "credentialsOnFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialsOnFile1"
              },
              {}
            ]
          }
        },
        "description": "Enter information from the AmazonPay integration."
      },
      "AmExSchemeSpecificData": {
        "title": "AmExSchemeSpecificData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "transactionId": {
            "maxLength": 15,
            "type": "string",
            "description": "This field contains a 15-character transaction ID that American Express assigns. Worldpay only returns this for American Express transactions."
          },
          "posDataCodes": {
            "maxLength": 12,
            "type": "string",
            "description": "This field contains a 15-character transaction ID that American Express assigns. Worldpay only returns this for American Express transactions."
          }
        },
        "description": "American Express (AmEx) specfic Authorization Response Data"
      },
      "BNPLInitiateSessionResponse": {
        "title": "BNPLInitiateSessionResponse",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "paymentId": {
            "type": "string",
            "description": "The payment ID to be used for reference throughout the lifecycle of the transaction. This value will be generated by Worldpay on the initial payment request"
          },
          "checkoutToken": {
            "type": "string",
            "description": "Checkout token to be used to complete alternate payment method payment."
          },
          "redirectURL": {
            "type": "string",
            "description": "A URL that can be used to redirect the consumer to the alternate payment method provider screenflow directly from the merchant backend."
          },
          "tokenExpiration": {
            "type": "string",
            "description": "The UTC timestamp of when the checkout token will expire, in ISO 8601 format"
          }
        },
        "description": "The response to Initiating a session to pay using a **BNPL** (Buy Now Pay Later)."
      },
      "CreditorDebitCardCNP": {
        "title": "CreditorDebitCardCNP",
        "required": [
          "type",
          "processAs"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "cardData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardData"
              },
              {}
            ]
          },
          "encryptedCardData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncryptedCardData"
              },
              {}
            ]
          },
          "processAs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardProcessAsEnum"
              },
              {}
            ]
          },
          "credentialsOnFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialsOnFile1"
              },
              {}
            ]
          },
          "returnTokenType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnTokenTypeEnum"
              },
              {}
            ]
          }
        },
        "description": "Information from the Credit or Debit Card. Use either **cardData** or **encryptedCardData** (when using P2PE)"
      },
      "MerchantClosedLoopGiftCardCNP": {
        "title": "MerchantClosedLoopGiftCardCNP",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "cardData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardData"
              },
              {}
            ]
          },
          "encryptedCardData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncryptedCardData"
              },
              {}
            ]
          }
        },
        "description": "Information from the Closed Loop Gift Card."
      },
      "GooglePayIntermediateSigningKey": {
        "title": "GooglePayIntermediateSigningKey",
        "required": [
          "signatures",
          "signedKey"
        ],
        "type": "object",
        "properties": {
          "signatures": {
            "type": "string"
          },
          "signedKey": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GooglePaySignedKey"
              },
              {}
            ]
          }
        }
      },
      "Merchant": {
        "title": "Merchant",
        "required": [
          "merchantId"
        ],
        "type": "object",
        "properties": {
          "merchantId": {
            "maxLength": 20,
            "type": "string",
            "description": "The unique merchant account identifier assigned by Worldpay.",
            "nullable": true
          },
          "terminalId": {
            "maxLength": 20,
            "type": "string",
            "description": "Needs a description, always required for Express, determines the batch."
          },
          "altMCC": {
            "maxLength": 4,
            "type": "string",
            "description": "**Alternate Merchant Category Code** (MCC/SIC) is a four-digit number which relates to a particular market segment to override the default one we have on file for your **merchantId**."
          },
          "softDescriptors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SoftDescriptors"
              },
              {}
            ]
          }
        },
        "description": "Information about the Merchant submiting this request"
      },
      "MOTO": {
        "title": "MOTO",
        "required": [
          "type",
          "paymentMethod"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "paymentMethod": {},
          "motoType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MotoTypeEnum"
              },
              {}
            ]
          },
          "marketCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MOTOMarketCodeEnum"
              },
              {}
            ]
          },
          "laneNumber": {
            "maxLength": 3,
            "type": "string",
            "description": "optionally provided if card is keyed into a physical terminal."
          },
          "deviceSerialNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "optionally provided if card is keyed into a physical terminal.",
            "nullable": true
          },
          "deviceModel": {
            "maxLength": 20,
            "type": "string",
            "description": "optionally provided if card is keyed into a physical terminal.",
            "nullable": true
          }
        },
        "description": "This type of transaction is most commonly used for card not present recurring/installment payments, it can also take place when the credit card number is given over the phone or through the mail and the merchant enters in the credit card information"
      },
      "OtherAmounts": {
        "title": "OtherAmounts",
        "type": "object",
        "properties": {
          "cashBack": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "On requests, this value represents the amount of cash back requested by the cardholder.  On replies, this value may be provided to represent the amount of cash back authorized by the issuer.",
            "format": "int64"
          },
          "surcharge": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Indicates that the consumer is charged a transaction fee for enacting the transaction by the terminal owner.  For non-POS credit card transactions, this fee is not included in the Transaction Amount field. The consumer performing the transaction is charged for the Transaction Amount plus Surcharge Fee Amount.  For POS credit card transactions, include this fee in the Transaction Amount field. The consumer performing the transaction is charged only for the value in the Transaction Amount field.",
            "format": "int64"
          },
          "convenienceFee": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Contains the convenience fee associated with a transaction. This value is for reporting purposes only, as the Transaction Amount field should included this amount in the total.",
            "format": "int64"
          },
          "tip": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Contains the tip amount associated with a transaction. This value is for reporting purposes only, as the Transaction Amount field should include this amount in the total.",
            "format": "int64"
          },
          "dispensed": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "This is the amount authorized for settlement. It is used in reversal processing to indicate the actual amount remaining after the reversal. By default, Worldpay assumes the reversal is a full reversal, so this field is only necessary where the reversal amount is different than the original transaction amount.",
            "format": "int64"
          },
          "salesTax": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Sales tax amount.",
            "format": "int64"
          },
          "cumulative": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Contains the cumulative amount of the incremental authorization transactions. Note: Use it only for Discover.",
            "format": "int64"
          },
          "paymentTrailing": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Contains the total amount from the original transaction of the incremental authorization. Note: Use it only for Discover.",
            "format": "int64"
          },
          "optum": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "OPTUM Amount",
            "format": "int64"
          }
        },
        "description": "Other (optional) amounts that are included in the Total Authorization Amount"
      },
      "Swiped": {
        "title": "Swiped",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "trackData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrackData"
              },
              {}
            ]
          },
          "encryptedTrackData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrackDataEncrypted"
              },
              {}
            ]
          },
          "pinData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PinData"
              },
              {}
            ]
          },
          "fallbackReasonCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardInputSwipedFallbackReasonCodeEnum"
              },
              {}
            ]
          }
        },
        "description": "Use either TrackData or EncryptedTrackData (when using P2PE)"
      },
      "EBTCardPOS": {
        "title": "EBTCardPOS",
        "required": [
          "type",
          "entryMethod"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "entryMethod": {},
          "voucher": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "fnsNumber": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "foodstampOnly": {
            "type": "boolean"
          }
        }
      },
      "EWICCard": {
        "title": "EWICCard",
        "required": [
          "type",
          "entryMethod"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "entryMethod": {},
          "ewicMerchantId": {
            "maxLength": 20,
            "type": "string"
          }
        }
      },
      "MerchantClosedLoopGiftCardPOS": {
        "title": "MerchantClosedLoopGiftCardPOS",
        "required": [
          "type",
          "entryMethod"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "entryMethod": {}
        }
      },
      "VASFraudsight": {
        "title": "VASFraudsight",
        "required": [
          "type",
          "cardholderName"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "cardholderName": {
            "type": "string"
          }
        },
        "description": "Additional Data for Enhanced Fraud analysis using FraudSight"
      },
      "Amount_Currency": {
        "title": "Amount_Currency",
        "required": [
          "totalAmount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "totalAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountCurrencyEnum"
              },
              {}
            ]
          }
        },
        "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100. Includes accepting a currency"
      },
      "AccountTypeEnum": {
        "title": "AccountTypeEnum",
        "enum": [
          "NotSpecified",
          "Savings",
          "Checking",
          "CreditCard",
          "Universal",
          "StoredValueAccount",
          "CashBenefitsAccount",
          "FoodStampsAccount"
        ],
        "type": "string",
        "description": "Specifies the type of healthcare account."
      },
      "CardholderPresentCodeEnum": {
        "title": "CardholderPresentCodeEnum",
        "enum": [
          "Default",
          "Unknown",
          "Present",
          "NotPresent",
          "MailOrder",
          "PhoneOrder",
          "StandingAuth",
          "Ecommerce"
        ],
        "type": "string"
      },
      "CardInputKeyedFallbackReasonCodeEnum": {
        "title": "CardInputKeyedFallbackReasonCodeEnum",
        "enum": [
          "NotApplicable",
          "ManualKeyedMagstripeFailure",
          "ManualKeyedChipReadFailure"
        ],
        "type": "string",
        "description": "Provides more information about why a lower capability entry mode was used."
      },
      "ConditionCodeEnum": {
        "title": "ConditionCodeEnum",
        "enum": [
          "00",
          "01",
          "02",
          "03",
          "05",
          "06",
          "08",
          "10",
          "51",
          "59"
        ],
        "type": "string",
        "description": "A value that describes the overall environment in which the transaction takes place.\n<br>\n  **Possible Values:**  \n  | Value | Description |  \n  | ----- | ------------|  \n  | 00 | Normal Transaction of This Type |\n  | 01 | Customer Not Present |\n  | 02 | Unattended terminal, customer Operated |\n  | 03 | Merchant Suspicious of Transaction |\n  | 05 | Customer Present, Card not Present |\n  | 06 | Previously authorized |\n  | 08 | Mail/Telephone Order |\n  | 10 | Customer Identity Verified |\n  | 51 | Verification-Only Request, the transaction amount must be zero. |\n  | 59| Electronic Commerce Transaction |"
      },
      "EMVCardInputCodeEnum": {
        "title": "EMVCardInputCodeEnum",
        "enum": [
          "ChipRead",
          "ContactlessChipRead"
        ],
        "type": "string",
        "description": "Provides more information about why the EMV Input Mode was used."
      },
      "MOTOMarketCodeEnum": {
        "title": "MOTOMarketCodeEnum",
        "enum": [
          "DirectMarketing (MOTO)",
          "AutoRental",
          "FoodRestaurant",
          "HotelLodging",
          "Retail",
          "QSR",
          "Grocery"
        ],
        "type": "string",
        "description": "Need to update this"
      },
      "PaymentAcceptanceDeviceCapabilitiesEnum": {
        "title": "PaymentAcceptanceDeviceCapabilitiesEnum",
        "enum": [
          "ManualEntryOnly",
          "MagstripeReader",
          "ChipReader",
          "ContactlessChipReader",
          "SoftPos"
        ],
        "type": "string"
      },
      "PaymentAcceptanceDeviceEnvironmentEnum": {
        "title": "PaymentAcceptanceDeviceEnvironmentEnum",
        "enum": [
          "localAttended",
          "localUnattended",
          "remoteAttended",
          "remoteUnattended"
        ],
        "type": "string"
      },
      "PaymentAcceptanceTerminalTypeEnum": {
        "title": "PaymentAcceptanceTerminalTypeEnum",
        "enum": [
          "ATMON",
          "ATM",
          "ATMOFF",
          "POS",
          "DIALPOS",
          "SCRIP",
          "TELEPHON",
          "HOMEBANK",
          "INTERNET",
          "MOBIBANK",
          "VENDING",
          "DVRS",
          "MPOS",
          "LIMITAMT",
          "CAT",
          "VIRTTERM",
          "SOFTPOS"
        ],
        "type": "string",
        "description": "The type of terminal that acquired the transaction. If omitted, a value of 'POS' will be used.\n<br>\n  **Possible Values:**  \n  | Value | Description |  \n  | ----- | ------------|  \n  | ATMON | |  \n  | ATM | |  \n  | ATMOFF | (Off premise ATM)|  \n  | POS | (Point of Sale)|  \n  | DIALPOS | (Dial POS device)|  \n  | SCRIP | (Scrip device)|  \n  | TELEPHON | (Telephone but not a Home Banking Transaction)|  \n  | HOMEBANK | (Home Banking Device)|  \n  | INTERNET | (Internet Banking)|  \n  | MOBIBANK | (Mobile Banking)|  \n  | VENDING | (Vending Machine)|  \n  | DVRS | (Audio - Dialogic Voice Response System)|  \n  | MPOS | (Mobile POS Device)|  \n  | LIMITAMT | (Limited Amount Terminal)|  \n  | CAT | (Cardholder Activated Terminal)|  \n  | VIRTTERM | (Virtual Terminal)|  \n  | SOFTPOS | (Soft POS Device - Tap To Pay)|"
      },
      "PaymentTypeEnum": {
        "title": "PaymentTypeEnum",
        "enum": [
          "Recurring",
          "Installment",
          "CardHolderInitiated",
          "CredentialsOnFile"
        ],
        "type": "string",
        "description": "Need to update this"
      },
      "ReturnTokenTypeEnum": {
        "title": "ReturnTokenTypeEnum",
        "enum": [
          "OmniToken",
          "PassToken"
        ],
        "type": "string",
        "description": "Optionally, choose a Worldpay Security Token type if you would like one returned in a successfull response."
      },
      "ReversalReasonEnum": {
        "title": "ReversalReasonEnum",
        "enum": [
          "NormalReversal",
          "TimeoutReversal",
          "Syntax",
          "ClerkCancel",
          "CustomerCancel",
          "PreviouslyAuthorized"
        ],
        "type": "string",
        "description": "This field contains the reason the reversal was generated."
      },
      "EnhancedDatum": {
        "title": "EnhancedDatum",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "transitAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "healthCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "prescriptionCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "visionCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "clinicCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "dentalCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "noShow": {
            "type": "boolean",
            "description": "Indicates if guest was a no show.",
            "example": false
          },
          "fireSafety": {
            "type": "boolean",
            "description": "Indicates whether the facility is in compliance with the Hotel and Motel Fire Safety Act of 1990 (PL101- 391), or similar legislation.",
            "example": true
          },
          "chargeDescriptor": {
            "maxLength": 6,
            "type": "string",
            "description": "A 6-digit value that identifies any additional charges that are added to the customer's card after checkout. Left justify and zero fill the value with each position containing one of the following values:  \n<br>\n| Value | Description |\n| ----- | ------------|\n| 0 | No extra charges |\n| 1 | Reserved |\n| 2 | Restaurant |\n| 3 | Gift Shop |\n| 4 | Mini Bar |\n| 5 | Telephone |\n| 6 | Other |\n| 7 | Laundry |",
            "example": "000245"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "departureDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "folioNumber": {
            "maxLength": 25,
            "type": "string",
            "description": "Lodging folio number",
            "example": "A#123455"
          },
          "propertyPhone": {
            "maxLength": 12,
            "type": "string",
            "description": "Phone number in E.164 format with no spaces, dashes, or parenthesis.",
            "example": "+18002372169"
          },
          "customerServicePhone": {
            "maxLength": 12,
            "type": "string",
            "description": "Phone number in E.164 format with no spaces, dashes, or parenthesis.",
            "example": "+18002372169"
          },
          "specialProgram": {
            "maxLength": 1,
            "type": "string",
            "description": "American Express special program code",
            "example": "X"
          },
          "numberOfAdults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32",
            "example": 2
          },
          "numberOfNights": {
            "type": "integer",
            "description": "Number of room nights",
            "format": "int32",
            "example": 6
          },
          "roomRate": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "hotelTax": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "food": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "foodBeverage": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "beverage": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "minibar": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "phone": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "movies": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "laundry": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "fitness": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "giftShop": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "parking": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "businessCenter": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "conventionCenter": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "cancellation": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "other": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "renterName": {
            "maxLength": 20,
            "type": "string",
            "description": "Vehicle renter's name",
            "example": "John Doe"
          },
          "agreement": {
            "maxLength": 25,
            "type": "string",
            "description": "Rental agreement number",
            "example": "A#444556"
          },
          "rentalDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "returnDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "returnCity": {
            "maxLength": 18,
            "type": "string",
            "description": "Vehicle return city",
            "example": "St. Louis"
          },
          "returnState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/USStateCodesEnum"
              },
              {}
            ]
          },
          "returnCountry": {
            "maxLength": 3,
            "type": "string",
            "description": "Vehicle return country",
            "example": "USA"
          },
          "returnLocationId": {
            "maxLength": 10,
            "type": "string"
          },
          "rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "insurance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "adjustment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "duration": {
            "type": "integer",
            "description": "Hotel/Auto Rental duration.",
            "format": "int32",
            "example": 7
          },
          "lineItems": {
            "maxItems": 25,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            },
            "description": ""
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TransactionAmounts": {
        "title": "TransactionAmounts",
        "required": [
          "totalAmount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "totalAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "The total Amount for this transaction in minor currency units **with no decimal point**.  For example $1.00 USD would be written as 100.  For card verification requests, set amount to 0 (zero).",
            "format": "int64",
            "example": 100
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountCurrencyEnum"
              },
              {}
            ]
          },
          "otherAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OtherAmounts1"
              },
              {}
            ]
          }
        },
        "description": "The Total Amount including currency (and optionally a breakdown) to authorize for this transaction."
      },
      "VehicleRentalData": {
        "title": "VehicleRentalData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "noShow": {
            "type": "boolean",
            "description": "Indicates if renter was a no show.",
            "example": false
          },
          "chargeDescriptor": {
            "description": "A 6-digit value that identifies any additional charges that are added to the customer's card after the vehicle return. Left justify and zero fill the value with each position containing one of the following values:  \n<br>\n| Value | Description |\n| ----- | ------------|\n| 0 | No extra charges |\n| 1 | Gasoline |\n| 2 | Extra Mileage |\n| 3 | Late Return |\n| 4 | One Way Service Fee |\n| 5 | Parking or Moving Violation |"
          },
          "renterName": {
            "maxLength": 20,
            "type": "string",
            "description": "Vehicle renter's name",
            "example": "John Doe"
          },
          "agreement": {
            "maxLength": 25,
            "type": "string",
            "description": "Rental agreement number",
            "example": "A#444556"
          },
          "rentalDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "returnDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "returnCity": {
            "maxLength": 18,
            "type": "string",
            "description": "Vehicle return city",
            "example": "St. Louis"
          },
          "returnState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/USStateCodesEnum"
              },
              {}
            ]
          },
          "returnCountry": {
            "maxLength": 3,
            "type": "string",
            "description": "Vehicle return country",
            "example": "USA"
          },
          "returnLocationId": {
            "maxLength": 10,
            "type": "string"
          },
          "rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "insurance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "adjustment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "other": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "duration": {
            "type": "integer",
            "description": "Hotel/Auto Rental duration.",
            "format": "int32",
            "example": 7
          }
        },
        "description": "Data associated with vehicle rental."
      },
      "ProblemDetailsInputValidationIssue": {
        "title": "ProblemDetailsInputValidationIssue",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).",
            "default": "about:blank",
            "example": "https://zalando.github.io/problem/constraint-violation"
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem type\nexample: Service Unavailable"
          },
          "detail": {
            "type": "string",
            "description": "A human readable explanation specific to this occurrence of the\nproblem.",
            "example": "Connection to database timed out"
          },
          "in": {
            "allOf": [
              {
                "$ref": "#/components/schemas/In"
              },
              {}
            ]
          },
          "name": {
            "type": "string"
          },
          "value": {}
        }
      },
      "UserDefinedFields": {
        "title": "UserDefinedFields",
        "type": "object",
        "properties": {
          "discretionaryField1": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "discretionaryField2": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "discretionaryField3": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "draftLocator": {
            "maxLength": 11,
            "type": "string",
            "description": "aka merchantReferenceNumber",
            "nullable": true
          }
        },
        "description": "A set of user defined fields that will round trip on responses and appear on merchant portals and reports."
      },
      "BNPLServiceEnum": {
        "title": "BNPLServiceEnum",
        "enum": [
          "AFTERPAY",
          "AFFIRM"
        ],
        "type": "string",
        "description": "The alternate payment method service to be used."
      },
      "CVVPresenceCodeEnum": {
        "title": "CVVPresenceCodeEnum",
        "enum": [
          "UseDefault",
          "NotProvided",
          "Provided",
          "Illegible",
          "CustomerIllegible"
        ],
        "type": "string",
        "description": "Indicates information about the availability of the Card CVV code."
      },
      "EcommerceMarketCodeEnum": {
        "title": "EcommerceMarketCodeEnum",
        "enum": [
          "Ecommerce",
          "AutoRental",
          "FoodRestaurant",
          "HotelLodging",
          "Retail",
          "QSR",
          "Grocery"
        ],
        "type": "string",
        "description": "Need to update this"
      },
      "MotoTypeEnum": {
        "title": "MotoTypeEnum",
        "enum": [
          "MailOrder",
          "Telephone"
        ],
        "type": "string",
        "description": "Indicates which MOTO method applies"
      },
      "ProcessingStatusEnum": {
        "title": "ProcessingStatusEnum",
        "enum": [
          "completedSuccessfully",
          "pending",
          "completedWithWarnings",
          "completedWithErrors"
        ],
        "type": "string",
        "description": "Indicates hwo the request completed."
      },
      "SubmissionTypeEnum": {
        "title": "SubmissionTypeEnum",
        "enum": [
          "Initial",
          "Subsequent",
          "Resubmission",
          "ReAuthorization"
        ],
        "type": "string",
        "description": "Need to update this"
      },
      "USStateCodesEnum": {
        "title": "USStateCodesEnum",
        "enum": [
          "AL",
          "AK",
          "AZ",
          "AR",
          "CA",
          "CO",
          "CT",
          "DE",
          "DC",
          "FL",
          "GA",
          "HI",
          "ID",
          "IL",
          "IN",
          "IA",
          "KS",
          "KY",
          "LA",
          "ME",
          "MD",
          "MA",
          "MI",
          "MN",
          "MS",
          "MO",
          "MT",
          "NE",
          "NV",
          "NH",
          "NJ",
          "NM",
          "NY",
          "NC",
          "ND",
          "OH",
          "OK",
          "OR",
          "PA",
          "RI",
          "SC",
          "SD",
          "TN",
          "TX",
          "UT",
          "VT",
          "VA",
          "WA",
          "WV",
          "WI",
          "WY"
        ],
        "type": "string",
        "description": "2 character US State Code Abbreviations"
      },
      "WalletTypeEnum": {
        "title": "WalletTypeEnum",
        "enum": [
          "None",
          "Android",
          "Apple",
          "Samsung"
        ],
        "type": "string",
        "description": "WalletType specifies the mobile wallet used for an In App transaction."
      },
      "Adjustment": {
        "title": "Adjustment",
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          }
        }
      },
      "WorldPayPassSecurityToken": {
        "title": "WorldPayPassSecurityToken",
        "required": [
          "type",
          "token"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "token": {
            "maxLength": 36,
            "type": "string"
          },
          "credentialsOnFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialsOnFile1"
              },
              {}
            ]
          }
        }
      },
      "ProblemDetails": {
        "title": "ProblemDetails",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).",
            "default": "about:blank",
            "example": "https://zalando.github.io/problem/constraint-violation"
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem type\nexample: Service Unavailable"
          },
          "status": {
            "maximum": 600.0,
            "exclusiveMaximum": true,
            "minimum": 100.0,
            "type": "integer",
            "description": "The HTTP status code generated by the origin server for this occurrence\nof the problem.",
            "format": "int32",
            "example": 503
          },
          "detail": {
            "type": "string",
            "description": "A human readable explanation specific to this occurrence of the\nproblem.",
            "example": "Connection to database timed out"
          },
          "instance": {
            "type": "string",
            "description": "An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced."
          },
          "issues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemDetailsInputValidationIssue"
            },
            "description": ""
          }
        },
        "example": {
          "type": "https://www.belgif.be/specification/rest/api-guide/problems/badRequest.html",
          "title": "Bad Request",
          "status": 400,
          "detail": "The input message is incorrect",
          "instance": "urn:uuid:123456-1234-1235-4567489798",
          "issues": [
            {
              "type": "urn:problem-type:belgif:input-validation:schemaViolation",
              "title": "Input isn't valid with respect to schema",
              "detail": "enterpriseNumber abc should be numeric",
              "in": "path",
              "name": "enterpriseNumber",
              "value": "abc"
            },
            {
              "type": "https://api.ksz-bcss.fgov.be/problems/replacedSsin",
              "title": "SSIN has been replaced. Use new ssin.",
              "detail": "SSIN 12345678901 has been replaced by 23456789012",
              "in": "body",
              "name": "parent[0].ssin",
              "value": {
                "original": "12345678901",
                "replacedBy": "23456789012"
              }
            },
            {
              "type": "urn:problem-type:cbss:input-validation:invalidPeriod",
              "title": "period is invalid",
              "detail": "endDate should be after startDate",
              "in": "body",
              "name": "period",
              "value": {
                "startDate": "2020-12-31",
                "endDate": "2020-01-01"
              }
            },
            {
              "type": "urn:problem-type:cbss:input-validation:invalidSsin",
              "title": "There is no person with the given SSIN",
              "in": "path",
              "name": "ssin",
              "value": "12345678911"
            }
          ]
        }
      },
      "AmountCurrencyEnum": {
        "title": "AmountCurrencyEnum",
        "enum": [
          "USD",
          "CAD"
        ],
        "type": "string",
        "description": "The three (3) character [ISO-4217 currency code](page:reference/iso-currency-codes) ] for the amount."
      },
      "CardPaymentEntryMethodP2PEEncryptionFormatEnum": {
        "title": "CardPaymentEntryMethodP2PEEncryptionFormatEnum",
        "enum": [
          "magtec",
          "ingenicoSomethingOrOther"
        ],
        "type": "string",
        "description": "Indicates the type of payment Method entry method used."
      },
      "CardPresentCodeEnum": {
        "title": "CardPresentCodeEnum",
        "enum": [
          "Default",
          "Unknown",
          "Present",
          "NotPresent"
        ],
        "type": "string"
      },
      "CardProcessAsEnum": {
        "title": "CardProcessAsEnum",
        "enum": [
          "SignatureCreditOrDebit",
          "Credit_SignatureOrPin",
          "Debit_PinOrPinless",
          "PinlessDebitConversion"
        ],
        "type": "string",
        "description": "Optionally specify exactly how the card should be processed."
      },
      "ECheckPaymentMethodAccountTypeEnum": {
        "title": "ECheckPaymentMethodAccountTypeEnum",
        "enum": [
          "checking",
          "savings"
        ],
        "type": "string",
        "description": "Indicates the type of Bank Account the customer wants to use."
      },
      "ISOCountryCodeEnum": {
        "title": "ISOCountryCodeEnum",
        "enum": [
          "CAN",
          "GBR",
          "USA"
        ],
        "type": "string",
        "description": "The three (3) character [ISO-3166 country code](page:reference/iso-country-codes) ] for the address."
      },
      "POSMarketCodeEnum": {
        "title": "POSMarketCodeEnum",
        "enum": [
          "Default",
          "AutoRental",
          "FoodRestaurant",
          "HotelLodging",
          "Petroleum",
          "Retail",
          "QSR",
          "Grocery"
        ],
        "type": "string",
        "description": "Need to update this"
      },
      "P2PECardInputCodeEnum": {
        "title": "P2PECardInputCodeEnum",
        "enum": [
          "Default",
          "Unknown",
          "MagstripeRead",
          "ContactlessMagstripeRead",
          "ManualKeyed",
          "ManualKeyedMagstripeFailure",
          "ChipRead",
          "ContactlessChipRead",
          "ManualKeyedChipReadFailure",
          "MagstripeReadChipReadFailure",
          "MagstripeReadNonTechnicalFallback"
        ],
        "type": "string",
        "description": "Provides more information about why the P2PE Input Mode was used."
      },
      "SecureIndicatorEnum": {
        "title": "SecureIndicatorEnum",
        "enum": [
          "SecureElectronicEcommerce",
          "NonAuthenticatedSecureTransaction",
          "NonAuthenticatedSecureEcommerceTransactions",
          "NonSecureEcommerceTransaction"
        ],
        "type": "string",
        "description": "tbd"
      },
      "Amount_NoCurrency": {
        "title": "Amount_NoCurrency",
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          }
        },
        "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100."
      },
      "TrackDataEncrypted": {
        "title": "TrackDataEncrypted",
        "required": [
          "keySerialNumber",
          "encryptedFormat",
          "encryptedTrack1Data",
          "encryptedTrack2Data",
          "cardInputCode"
        ],
        "type": "object",
        "properties": {
          "keySerialNumber": {
            "maxLength": 120,
            "type": "string"
          },
          "encryptedFormat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardPaymentEntryMethodP2PEEncryptionFormatEnum"
              },
              {}
            ]
          },
          "encryptedTrack1Data": {
            "maxLength": 120,
            "type": "string",
            "nullable": true
          },
          "encryptedTrack2Data": {
            "maxLength": 120,
            "type": "string",
            "nullable": true
          },
          "cardInputCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/P2PECardInputCodeEnum"
              },
              {}
            ]
          }
        }
      },
      "VASAssured": {
        "title": "VASAssured",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "assuredUserAccountData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssuredUserAccountData"
              },
              {}
            ]
          }
        },
        "description": "abc"
      },
      "VisaSchemeSpecificData": {
        "title": "VisaSchemeSpecificData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "validationCode": {
            "maxLength": 4,
            "type": "string",
            "description": "Contains a Visa calculated code to ensure that key fields in the authorization request matches their respective fields in the BASE II deferred clearing message."
          },
          "transactionId": {
            "maxLength": 15,
            "type": "string",
            "description": "Contains the reference number assigned by Visa."
          },
          "businessAppId": {
            "maxLength": 2,
            "type": "string",
            "description": "Visa Business Application ID."
          },
          "authCharId": {
            "maxLength": 1,
            "type": "string",
            "description": "Contains a code that the acquirer uses to request CPS qualification."
          },
          "cardLevelResults": {
            "maxLength": 2,
            "type": "string",
            "description": "Visa populates this field with a product identification value using issuer-supplied data on file in the Cardholder Database or the product ID on the account range. Using these values, you track card-level activity by individual account number."
          },
          "responseCode": {
            "maxLength": 2,
            "type": "string",
            "description": "Response code assigned to the transaction by Visa."
          },
          "spendQualifier": {
            "maxLength": 1,
            "type": "string",
            "description": "Visa Spend Qualifier."
          },
          "visaSecureToken": {
            "maxLength": 3,
            "type": "string",
            "description": "This field contains one of the following values from the network if available.\n<br>\n**Possible Values:**\n| Value | Description |\n| ----- | ------------|\n| VSR | Request Visa Secure Token |\n| VSY | If returned, Visa Secure Token is present |\n| VSN | If returned, Visa Secure Token is not present |"
          },
          "additionalTokenInfo": {
            "maxLength": 1,
            "type": "string",
            "description": "This field contains a value that can identify transactions that are eligible for token services. Acquirers can retain the value in this field from the authorization and send it in clearing transactions. Refer to the Visa specifications for Field 44.3 for the most recent list of valid values..\n<br>\n**Possible Values:**\n| Value | Description |\n| ----- | ------------|\n| <blank> | Not Applicable |\n| VSY | Token Program |"
          }
        },
        "description": "Visa specfic Authorization Response Data"
      },
      "WorldPayOmniTokenSecurityToken": {
        "title": "WorldPayOmniTokenSecurityToken",
        "required": [
          "type",
          "token"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "token": {
            "maxLength": 19,
            "type": "string"
          },
          "cardLogo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardLogoEnum"
              },
              {}
            ]
          },
          "credentialsOnFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialsOnFile1"
              },
              {}
            ]
          }
        }
      },
      "AddressInfo": {
        "title": "AddressInfo",
        "required": [
          "zipCode",
          "countryCode"
        ],
        "type": "object",
        "properties": {
          "fullname": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "street1": {
            "maxLength": 40,
            "type": "string",
            "description": "Address Line 1",
            "nullable": true
          },
          "street2": {
            "maxLength": 40,
            "type": "string",
            "description": "Address Line 2",
            "nullable": true
          },
          "city": {
            "maxLength": 18,
            "type": "string",
            "nullable": true
          },
          "stateProvinceCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/USStateCodesEnum"
              },
              {}
            ]
          },
          "zipCode": {
            "maxLength": 9,
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISOCountryCodeEnum"
              },
              {}
            ]
          }
        }
      },
      "AmountTypeEnum": {
        "title": "AmountTypeEnum",
        "enum": [
          "LedgerBalance",
          "Healthcare",
          "Transit",
          "Copayment",
          "OriginalAmount",
          "PartialAuthorizedAmount",
          "Prescription",
          "Vision",
          "Clinic",
          "Dental",
          "CashOver",
          "OriginalCashOver"
        ],
        "type": "string",
        "description": "Specifies the type of healthcare amount."
      },
      "CardInputSwipedFallbackReasonCodeEnum": {
        "title": "CardInputSwipedFallbackReasonCodeEnum",
        "enum": [
          "NotApplicable",
          "MagstripeReadChipReadFailure",
          "MagstripeReadNonTechnicalFallback"
        ],
        "type": "string",
        "description": "Provides more information about why a lower capability entry mode was used."
      },
      "CardLogoEnum": {
        "title": "CardLogoEnum",
        "enum": [
          "NotApplicable",
          "Visa",
          "MasterCard",
          "Amex",
          "Discover",
          "Diners",
          "StoredValue",
          "Other",
          "JCB",
          "CarteBlanche",
          "Interac",
          "UnionPay"
        ],
        "type": "string",
        "description": "Provides the type of card used with a token request."
      },
      "DCC2ndPassEnum": {
        "title": "DCC2ndPassEnum",
        "enum": [
          "Y",
          "N",
          "Z"
        ],
        "type": "string",
        "description": "Indicates if the customer opted-in or opted-out of the currency conversion rate.  \n<br>\n  **Possible Values:**  \n  | Value | Description |  \n  | ----- | ------------|  \n  | Y | Need DCC Auth: Cardholder opted-in to DCC. |  \n  | N | Need US Dollar Authorization: Cardholder opted-out of DCC. |  \n  | Z |  Need US Dollar Authorization: Merchant temporarily suspended DCC program. |"
      },
      "Rate": {
        "title": "Rate",
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          }
        }
      },
      "In": {
        "title": "In",
        "enum": [
          "body",
          "header",
          "path",
          "query"
        ],
        "type": "string"
      },
      "CardData": {
        "title": "CardData",
        "required": [
          "pan",
          "expiration"
        ],
        "type": "object",
        "properties": {
          "pan": {
            "type": "string",
            "description": "The Primary Account Number (PAN) on the card."
          },
          "expiration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Expiration"
              },
              {}
            ]
          },
          "cvv": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "The 3 or 4 digit Cardholder Verfication Code",
            "nullable": true
          },
          "cvvPresenceCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CVVPresenceCodeEnum"
              },
              {}
            ]
          }
        }
      },
      "EncryptedCardData": {
        "title": "EncryptedCardData",
        "required": [
          "keySerialNumber",
          "encryptedFormat",
          "encryptedData",
          "cvvPresenceCode"
        ],
        "type": "object",
        "properties": {
          "keySerialNumber": {
            "type": "string"
          },
          "encryptedFormat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardPaymentEntryMethodP2PEEncryptionFormatEnum"
              },
              {}
            ]
          },
          "encryptedData": {
            "type": "string",
            "nullable": true
          },
          "cvvPresenceCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CVVPresenceCodeEnum"
              },
              {}
            ]
          }
        }
      },
      "PaymentsAuthorizeResponse": {
        "title": "PaymentsAuthorizeResponse",
        "required": [
          "authorizeResult"
        ],
        "type": "object",
        "properties": {
          "wpAuthorizationId": {
            "maxLength": 21,
            "minLength": 21,
            "type": "string",
            "description": "A unique reference generated by Worldpay that is used to identify a payment throughout its lifecycle.",
            "example": "V1StGXR8_Z5jdHi6B-myT"
          },
          "wpPaymentId": {
            "maxLength": 21,
            "minLength": 21,
            "type": "string",
            "description": "A unique reference generated by Worldpay that is used to identify a payment throughout its lifecycle.",
            "example": "V1StGXR8_Z5jdHi6B-myT"
          },
          "authorizeResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizeResult"
              },
              {}
            ]
          },
          "authorizedAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizedAmount"
              },
              {}
            ]
          },
          "avsResult": {
            "type": "string",
            "description": "Optional response if you request an AVS Check\n<br>\n  **Possible Values:**  \n  | Value | Description |  \n  | ----- | ------------|  \n  | A | Address Matches, ZIP does not |\n  | B | Address Matches, ZIP not verified |\n  | C | Address an ZIP not verified |\n  | D | Address and postal code match, international AVS only |\n  | E | Edit Error or ineligible |\n  | F | Address and ZIP match - UK only |\n  | G | Address not verified - international |\n  | I | Address not verified |\n  | M | Address and postal code match, international AVS only |\n  | N | Neither address nor ZIP match |\n  | P | Codes match, addresses not verified |\n  | R | System unavailable or time-out |\n  | S | AVS not supported |\n  | U | Address info N/A |\n  | W | Nine digit zip matches, not address |\n  | X | Address and nine digit zip match, domestic AVS only |\n  | Y | Address and five digit zip match, domestic AVS only |\n  | Z | ZIP matches, address does not |"
          },
          "tokenData": {},
          "schemeSpecificData": {},
          "dccResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DccResult2"
              },
              {}
            ]
          },
          "fraudResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FraudResult2"
              },
              {}
            ]
          },
          "accountUpdaterData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountUpdaterData2"
              },
              {}
            ]
          },
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          }
        }
      },
      "PinData": {
        "title": "PinData",
        "required": [
          "pinBlock",
          "keySerialNumber"
        ],
        "type": "object",
        "properties": {
          "pinBlock": {
            "type": "string",
            "description": "A block of data used to encapsulate a PIN during processing."
          },
          "keySerialNumber": {
            "type": "string",
            "description": "Key Serial Number."
          }
        }
      },
      "ReplacementExpirationDate": {
        "title": "ReplacementExpirationDate",
        "required": [
          "month",
          "year"
        ],
        "type": "object",
        "properties": {
          "month": {
            "maximum": 12.0,
            "minimum": 1.0,
            "type": "integer",
            "description": "The calendar month that the card expires.",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "description": "The calendar year that the card expires.",
            "format": "int32"
          }
        }
      },
      "TransactionAmounts1": {
        "title": "TransactionAmounts1",
        "required": [
          "totalAmount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "totalAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "The total Amount for this transaction in minor currency units **with no decimal point**.  For example $1.00 USD would be written as 100.  For card verification requests, set amount to 0 (zero).",
            "format": "int64",
            "example": 100
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountCurrencyEnum"
              },
              {}
            ]
          },
          "otherAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OtherAmounts1"
              },
              {}
            ]
          }
        }
      },
      "LineItem": {
        "title": "LineItem",
        "type": "object",
        "properties": {
          "itemDescription": {
            "type": "string"
          },
          "unitOfMeasure": {
            "type": "string"
          },
          "unitPrice": {
            "type": "string"
          },
          "unitPriceDecimals": {
            "type": "string"
          },
          "itemQuantity": {
            "type": "string"
          },
          "itemQuantityDecimal": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "itemDiscount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemDiscount"
              },
              {}
            ]
          }
        }
      },
      "EnhancedData": {
        "title": "EnhancedData",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "transitAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "healthCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "prescriptionCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "visionCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "clinicCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "dentalCareAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "noShow": {
            "type": "boolean",
            "description": "Indicates if guest was a no show.",
            "example": false
          },
          "fireSafety": {
            "type": "boolean",
            "description": "Indicates whether the facility is in compliance with the Hotel and Motel Fire Safety Act of 1990 (PL101- 391), or similar legislation.",
            "example": true
          },
          "chargeDescriptor": {
            "maxLength": 6,
            "type": "string",
            "description": "A 6-digit value that identifies any additional charges that are added to the customer's card after checkout. Left justify and zero fill the value with each position containing one of the following values:  \n<br>\n| Value | Description |\n| ----- | ------------|\n| 0 | No extra charges |\n| 1 | Reserved |\n| 2 | Restaurant |\n| 3 | Gift Shop |\n| 4 | Mini Bar |\n| 5 | Telephone |\n| 6 | Other |\n| 7 | Laundry |",
            "example": "000245"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "departureDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "folioNumber": {
            "maxLength": 25,
            "type": "string",
            "description": "Lodging folio number",
            "example": "A#123455"
          },
          "propertyPhone": {
            "maxLength": 12,
            "type": "string",
            "description": "Phone number in E.164 format with no spaces, dashes, or parenthesis.",
            "example": "+18002372169"
          },
          "customerServicePhone": {
            "maxLength": 12,
            "type": "string",
            "description": "Phone number in E.164 format with no spaces, dashes, or parenthesis.",
            "example": "+18002372169"
          },
          "specialProgram": {
            "maxLength": 1,
            "type": "string",
            "description": "American Express special program code",
            "example": "X"
          },
          "numberOfAdults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32",
            "example": 2
          },
          "numberOfNights": {
            "type": "integer",
            "description": "Number of room nights",
            "format": "int32",
            "example": 6
          },
          "roomRate": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "hotelTax": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "food": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "foodBeverage": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "beverage": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "minibar": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "phone": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "movies": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "laundry": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "fitness": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "giftShop": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "parking": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "businessCenter": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "conventionCenter": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "cancellation": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "other": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount_NoCurrency"
              },
              {
                "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100."
              }
            ]
          },
          "renterName": {
            "maxLength": 20,
            "type": "string",
            "description": "Vehicle renter's name",
            "example": "John Doe"
          },
          "agreement": {
            "maxLength": 25,
            "type": "string",
            "description": "Rental agreement number",
            "example": "A#444556"
          },
          "rentalDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "returnDate": {
            "type": "string",
            "description": "Date in the format YYYY-MM-DD",
            "format": "date",
            "example": "1970-12-01"
          },
          "returnCity": {
            "maxLength": 18,
            "type": "string",
            "description": "Vehicle return city",
            "example": "St. Louis"
          },
          "returnState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/USStateCodesEnum"
              },
              {}
            ]
          },
          "returnCountry": {
            "maxLength": 3,
            "type": "string",
            "description": "Vehicle return country",
            "example": "USA"
          },
          "returnLocationId": {
            "maxLength": 10,
            "type": "string"
          },
          "rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "insurance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "adjustment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Adjustment"
              },
              {}
            ]
          },
          "duration": {
            "type": "integer",
            "description": "Hotel/Auto Rental duration.",
            "format": "int32",
            "example": 7
          },
          "lineItems": {
            "maxItems": 25,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            },
            "description": ""
          }
        },
        "description": "Additional information about the transaction that for certain types of requests can reduce your interchange cost."
      },
      "DccResult2": {
        "title": "DccResult2",
        "type": "object",
        "properties": {
          "info": {
            "type": "string"
          }
        }
      },
      "Expiration": {
        "title": "Expiration",
        "required": [
          "month",
          "year"
        ],
        "type": "object",
        "properties": {
          "month": {
            "maximum": 12.0,
            "minimum": 1.0,
            "type": "integer",
            "description": "The calendar month that the card expires.",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "description": "The calendar year that the card expires.",
            "format": "int32"
          }
        }
      },
      "FraudResult2": {
        "title": "FraudResult2",
        "type": "object",
        "properties": {
          "riskStatus": {
            "type": "integer",
            "description": "If requested, the current risk status from Merchant Fraudsight will be returned.\n<br>\n  **Possible Values:**  \n  | Value | Description |\n  | ----- | ------------|\n  | 0 | Pass |\n  | 1 | Review |\n  | 2 | Fail |\n  | 3 | Unknown |\n  | 4 | Fail, informational only: Transaction approved |",
            "format": "int32"
          },
          "riskScore": {
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number",
            "description": "If requested, the current risk score from Merchant Fraudsight will be returned where the risk score is between 0.0000 and 1.0000."
          }
        }
      },
      "PaymentsAuthorizeRequest": {
        "title": "PaymentsAuthorizeRequest",
        "required": [
          "merchantData",
          "transactionAmounts",
          "paymentScenario"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "paymentScenario": {},
          "processingFlags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFlags"
              },
              {}
            ]
          },
          "applicationData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicationData2"
              },
              {}
            ]
          },
          "customerData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerData2"
              },
              {}
            ]
          },
          "enhancedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnhancedData1"
            },
            "description": "Additional information about the transaction that for certain types of requests can reduce your interchange cost."
          },
          "valueAddedServices": {},
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          },
          "dccData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DccData"
              },
              {}
            ]
          }
        }
      },
      "PaymentsAuthorizeRequest1": {
        "title": "PaymentsAuthorizeRequest1",
        "required": [
          "merchantData",
          "transactionAmounts"
        ],
        "type": "object",
        "properties": {
          "merchantData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantData"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "otherAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OtherAmounts1"
              },
              {}
            ]
          },
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          }
        }
      },
      "PaymentsAuthorizeResponse1": {
        "title": "PaymentsAuthorizeResponse1",
        "type": "object",
        "properties": {
          "wpAuthorizationId": {
            "type": "string",
            "description": "The unique original authorization identifier generated by Worldpay.",
            "nullable": true
          },
          "authorizeResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizeResult"
              },
              {}
            ]
          },
          "transactionAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAmounts1"
              },
              {}
            ]
          },
          "userDefinedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDefinedFields1"
              },
              {}
            ]
          }
        }
      },
      "UserDefinedFields1": {
        "title": "UserDefinedFields1",
        "type": "object",
        "properties": {
          "discretionaryField1": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "discretionaryField2": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "discretionaryField3": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "draftLocator": {
            "maxLength": 11,
            "type": "string",
            "description": "aka merchantReferenceNumber",
            "nullable": true
          }
        }
      },
      "ItemDiscount": {
        "title": "ItemDiscount",
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          },
          "rate": {
            "type": "string"
          },
          "rateDecimal": {
            "type": "string"
          }
        }
      },
      "Other": {
        "title": "Other",
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          }
        }
      },
      "AccountUpdaterData2": {
        "title": "AccountUpdaterData2",
        "type": "object",
        "properties": {
          "replacementPAN": {
            "maxLength": 20,
            "type": "string",
            "description": "This field contains the replacement PAN."
          },
          "replacementExpirationDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReplacementExpirationDate"
              },
              {}
            ]
          },
          "accountStatus": {
            "maxLength": 1,
            "type": "string",
            "description": "This field contains one of the following values from the network if available.\n<br>\n  **Possible Values:**\n  | Value | Description |\n  | ----- | ------------|\n  | C | Closed Account |\n  | E | Expiration Date updated |\n  | Q | Contact Cardholder |"
          },
          "errorCodes": {
            "maxLength": 6,
            "type": "string",
            "description": "This field contains one of the following error codes from the network if available.\n<br>\n  **Possible Values:**\n  | Value | Description |\n  | ----- | ------------|\n  | VAU001 | Transaction did not qualify because the transaction contains token |\n  | VAU002 | Real Time AU is supported only for branded PAN |\n  | VAU003 | Real Time AU is not supported for this network |\n  | VAU004 | Transaction is not original purchase or bill payment |\n  | VAU005 | Transaction contains CVV2 |\n  | VAU006 | Transaction is not a qualifying transaction type |\n  | VAU007 | Real Time AU is not supported for this Merchant Category Code (MCC) |\n  | VAU008 | Acquirer of processor is not activated for Real Time VAU |\n  | VAU009 | Issuer does not support Real Time AU |\n  | VAU010 | Issuer or Visa blocked the merchant |\n  | VAU011 | Pre-authorized Payment Cancellation Service (PPCS) stop payment order for this transaction |\n  | VAU012 | Credentials in the authorization request is the latest AU data |\n<br>\n  Note Values could be added at any time and your client should not throw an exception for unknown values."
          }
        }
      },
      "AuthorizedAmount": {
        "title": "AuthorizedAmount",
        "required": [
          "totalAmount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "totalAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountCurrencyEnum"
              },
              {}
            ]
          }
        }
      },
      "OtherAmounts1": {
        "title": "OtherAmounts1",
        "type": "object",
        "properties": {
          "cashBack": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "On requests, this value represents the amount of cash back requested by the cardholder.  On replies, this value may be provided to represent the amount of cash back authorized by the issuer.",
            "format": "int64"
          },
          "surcharge": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Indicates that the consumer is charged a transaction fee for enacting the transaction by the terminal owner.  For non-POS credit card transactions, this fee is not included in the Transaction Amount field. The consumer performing the transaction is charged for the Transaction Amount plus Surcharge Fee Amount.  For POS credit card transactions, include this fee in the Transaction Amount field. The consumer performing the transaction is charged only for the value in the Transaction Amount field.",
            "format": "int64"
          },
          "convenienceFee": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Contains the convenience fee associated with a transaction. This value is for reporting purposes only, as the Transaction Amount field should included this amount in the total.",
            "format": "int64"
          },
          "tip": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Contains the tip amount associated with a transaction. This value is for reporting purposes only, as the Transaction Amount field should include this amount in the total.",
            "format": "int64"
          },
          "dispensed": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "This is the amount authorized for settlement. It is used in reversal processing to indicate the actual amount remaining after the reversal. By default, Worldpay assumes the reversal is a full reversal, so this field is only necessary where the reversal amount is different than the original transaction amount.",
            "format": "int64"
          },
          "salesTax": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Sales tax amount.",
            "format": "int64"
          },
          "cumulative": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Contains the cumulative amount of the incremental authorization transactions. Note: Use it only for Discover.",
            "format": "int64"
          },
          "paymentTrailing": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Contains the total amount from the original transaction of the incremental authorization. Note: Use it only for Discover.",
            "format": "int64"
          },
          "optum": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "OPTUM Amount",
            "format": "int64"
          }
        }
      },
      "ProcessingFlags": {
        "title": "ProcessingFlags",
        "type": "object",
        "properties": {
          "autoCapture": {
            "type": "boolean",
            "description": "If true, you want to Authorise and Capture in a single step.",
            "default": false,
            "nullable": true
          },
          "addressVerification": {
            "type": "boolean",
            "description": "If true, you want to perform an address verification.",
            "default": false,
            "nullable": true
          },
          "partialApproval": {
            "type": "boolean",
            "description": "If true, you will accept approvals for less than the total requested amount.",
            "default": false,
            "nullable": true
          },
          "duplicateCheck": {
            "type": "boolean",
            "description": "If true, perform duplicate check as configured for merchant, set to false to disable duplicate check.",
            "default": true,
            "nullable": true
          },
          "deferredAuthorization": {
            "type": "boolean",
            "description": "Used to identify store and forward transactions.",
            "default": true,
            "nullable": true
          },
          "debtRepayment": {
            "type": "boolean",
            "description": "Used to identify debt repayment, valid for certain MCCs.",
            "default": true,
            "nullable": true
          },
          "estimatedAmount": {
            "type": "boolean",
            "description": "Input field required by Visa and MC to identify whether the amount submitted is an estimated amount or a final amount.",
            "default": true,
            "nullable": true
          },
          "dcc2ndPass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DCC2ndPassEnum"
              },
              {}
            ]
          },
          "billPayment": {
            "type": "boolean",
            "description": "Only truly required use of this input field is for DebitCardPINlessSale/Return methods.",
            "default": false,
            "nullable": true
          }
        }
      },
      "SoftDescriptors": {
        "title": "SoftDescriptors",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 25,
            "type": "string",
            "description": "Used by merchant to customize merchant name on cardholder statement.",
            "nullable": true
          },
          "city": {
            "maxLength": 13,
            "type": "string",
            "description": "Used by merchant to customize merchant city on cardholder statement."
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/USStateCodesEnum"
              },
              {}
            ]
          }
        }
      },
      "UserDefindFields": {
        "title": "UserDefindFields",
        "type": "object",
        "properties": {
          "discretionaryField1": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "discretionaryField2": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "discretionaryField3": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "draftLocator": {
            "maxLength": 11,
            "type": "string",
            "description": "aka merchantReferenceNumber",
            "nullable": true
          }
        }
      },
      "Insurance": {
        "title": "Insurance",
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount value in minor currency units with no decimal point.  For example $1.00 would be written as 100.",
            "format": "int64",
            "example": 100
          }
        }
      },
      "ApplicationData2": {
        "title": "ApplicationData2",
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string"
          },
          "applicationName": {
            "type": "string"
          },
          "applicationVersion": {
            "type": "string"
          }
        }
      },
      "CredentialsOnFile1": {
        "title": "CredentialsOnFile1",
        "type": "object",
        "properties": {
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentTypeEnum"
              },
              {}
            ]
          },
          "submissionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubmissionTypeEnum"
              },
              {}
            ]
          },
          "networkTransactionId": {
            "type": "string",
            "description": "Transaction identifier returned on initial CoF authorization, provide for all subsequent CoF authorizations."
          }
        }
      },
      "CustomerData2": {
        "title": "CustomerData2",
        "type": "object",
        "properties": {
          "ssn": {
            "type": "string",
            "description": "The customer's Social Security Number (Do we still need this???)"
          },
          "dob": {
            "type": "string",
            "description": "The customer's Date of Birth (Do we still need this???)"
          },
          "billingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressInfo"
              },
              {}
            ]
          },
          "shippingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressInfo"
              },
              {}
            ]
          }
        }
      },
      "DccData": {
        "title": "DccData",
        "type": "object",
        "properties": {
          "useConvertedCurrency": {
            "type": "boolean",
            "description": "Indicates whether the customer at the terminal wishes to use the rates returned to the terminal."
          },
          "dccRateRequestFirst": {
            "type": "boolean",
            "description": "indicates whether a DCC rate request should be performed before attempting to complete the current transaction."
          },
          "dccConvertedAmount": {
            "maximum": 99999999999.0,
            "type": "integer",
            "description": "Amount converted to the cardholder's currency (DCC processing)",
            "format": "int64"
          },
          "dccConversionRate": {
            "type": "boolean",
            "description": "Rate used to convert the currency."
          },
          "dccCurrencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountCurrencyEnum"
              },
              {}
            ]
          }
        }
      },
      "MerchantData": {
        "title": "MerchantData",
        "required": [
          "merchantId"
        ],
        "type": "object",
        "properties": {
          "merchantId": {
            "maxLength": 20,
            "type": "string",
            "description": "The unique merchant account identifier assigned by Worldpay.",
            "nullable": true
          },
          "terminalId": {
            "maxLength": 20,
            "type": "string",
            "description": "Needs a description, always required for Express, determines the batch."
          },
          "altMCC": {
            "maxLength": 4,
            "type": "string",
            "description": "**Alternate Merchant Category Code** (MCC/SIC) is a four-digit number which relates to a particular market segment to override the default one we have on file for your **merchantId**."
          },
          "softDescriptors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SoftDescriptors"
              },
              {}
            ]
          }
        }
      },
      "InitiateSessionRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BNPLInitiateSession"
          },
          {
            "$ref": "#/components/schemas/ECheckInitiateSession"
          }
        ],
        "description": "This describes the body for an Initiate Session request",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "apm/bnpl": "BNPLInitiateSession",
            "apm/echeck": "ECheckInitiateSession"
          }
        }
      },
      "InitiateSessionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BNPLInitiateSessionResponse"
          },
          {
            "$ref": "#/components/schemas/ECheckInitiateSessionResponse"
          }
        ],
        "description": "This describes the body for an Initiate Session response",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "apm/bnpl": "BNPLInitiateSessionResponse",
            "apm/echeck": "ECheckInitiateSessionResponse"
          }
        }
      },
      "ACHPaymentMethod": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ECHECK"
          },
          {
            "$ref": "#/components/schemas/DirectDebit"
          }
        ],
        "description": "Identifies what the customer is using to pay with.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "eCheck": "ECHECK",
            "directDebit": "DirectDebit"
          }
        }
      },
      "BaseDataToTokenize": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BasicCardDataToTokenize"
          },
          {
            "$ref": "#/components/schemas/ECHECK"
          }
        ],
        "description": "The type and required details of data to tokenize"
      },
      "EcommercePaymentMethod": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreditorDebitCardCNP"
          },
          {
            "$ref": "#/components/schemas/MerchantClosedLoopGiftCardCNP"
          },
          {
            "$ref": "#/components/schemas/WorldPayOmniTokenSecurityToken"
          },
          {
            "$ref": "#/components/schemas/WorldPayPassSecurityToken"
          },
          {
            "$ref": "#/components/schemas/EBTCardCNP"
          },
          {
            "$ref": "#/components/schemas/ApplePayWallet"
          },
          {
            "$ref": "#/components/schemas/GooglePayWallet"
          },
          {
            "$ref": "#/components/schemas/AmazonPayWallet"
          }
        ],
        "description": "Identifies what the customer is using to pay with.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card/creditOrDebit": "CreditorDebitCardCNP",
            "card/gift": "MerchantClosedLoopGiftCardCNP",
            "token/omni": "WorldPayOmniTokenSecurityToken",
            "token/pass": "WorldPayPassSecurityToken",
            "card/ebt": "EBTCardCNP",
            "wallet/applePay": "ApplePayWallet",
            "wallet/googlePay": "GooglePayWallet",
            "wallet/amazonPay": "AmazonPayWallet"
          }
        }
      },
      "EnhancedData1": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/AirlineData"
          },
          {
            "$ref": "#/components/schemas/HealthCareData"
          },
          {
            "$ref": "#/components/schemas/LodgingData"
          },
          {
            "$ref": "#/components/schemas/VehicleRentalData"
          },
          {
            "$ref": "#/components/schemas/Level3Data"
          }
        ],
        "description": "Additional information about the transaction that for certain types of requests can reduce your interchange cost."
      },
      "MOTOPaymentMethod": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreditorDebitCardCNP"
          },
          {
            "$ref": "#/components/schemas/MerchantClosedLoopGiftCardCNP"
          },
          {
            "$ref": "#/components/schemas/WorldPayOmniTokenSecurityToken"
          },
          {
            "$ref": "#/components/schemas/WorldPayPassSecurityToken"
          },
          {
            "$ref": "#/components/schemas/EBTCardCNP"
          }
        ],
        "description": "Identifies what the customer is using to pay with.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card/creditOrDebit": "CreditorDebitCardCNP",
            "card/gift": "MerchantClosedLoopGiftCardCNP",
            "token/omni": "WorldPayOmniTokenSecurityToken",
            "token/pass": "WorldPayPassSecurityToken",
            "card/ebt": "EBTCardCNP",
            "wallet/applePay": "ApplePayWallet",
            "wallet/googlePay": "GooglePayWallet",
            "wallet/amazonPay": "AmazonPayWallet"
          }
        }
      },
      "PaymentScenario": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ECOMMERCE"
          },
          {
            "$ref": "#/components/schemas/POS"
          },
          {
            "$ref": "#/components/schemas/MOTO"
          },
          {
            "$ref": "#/components/schemas/ACH"
          }
        ],
        "description": "Identifies the Context (ex: ECOM, POS, MOTO, ACH) for the Payment Authorization request.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ecommerce": "ECOMMERCE",
            "pos": "POS",
            "moto": "MOTO",
            "ach": "ACH"
          }
        }
      },
      "POSCardEntryMethod": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Keyed"
          },
          {
            "$ref": "#/components/schemas/Swiped"
          },
          {
            "$ref": "#/components/schemas/EMV"
          }
        ],
        "description": "Identifies **HOW** (ex Keyed, Swiped, Inserted or Tapped) the customer is providing the card information.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "keyed": "Keyed",
            "swiped": "Swiped",
            "emv": "EMV"
          }
        }
      },
      "POSEbtCardEntryMethod": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Keyed"
          },
          {
            "$ref": "#/components/schemas/Swiped"
          }
        ],
        "description": "Identifies **HOW** (ex Keyed, Swiped) the customer is providing the card information.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "entryMethod/keyed": "Keyed",
            "entryMethod/swiped": "Swiped"
          }
        }
      },
      "POSEwicCardEntryMethod": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Keyed"
          },
          {
            "$ref": "#/components/schemas/Swiped"
          }
        ],
        "description": "Identifies **HOW** (ex Keyed, Swiped) the customer is providing the card information."
      },
      "POSGiftCardEntryMethod": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Keyed"
          },
          {
            "$ref": "#/components/schemas/Swiped"
          }
        ],
        "description": "Identifies **HOW** (ex Keyed, Swiped) the customer is providing the card information.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "keyed": "Keyed",
            "swiped": "Swiped"
          }
        }
      },
      "POSPaymentMethod": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreditorDebitCardPOS"
          },
          {
            "$ref": "#/components/schemas/MerchantClosedLoopGiftCardPOS"
          },
          {
            "$ref": "#/components/schemas/EBTCardPOS"
          },
          {
            "$ref": "#/components/schemas/EWICCard"
          },
          {
            "$ref": "#/components/schemas/WorldPayOmniTokenSecurityToken"
          },
          {
            "$ref": "#/components/schemas/WorldPayPassSecurityToken"
          }
        ],
        "description": "Identifies what the customer is using to pay with.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card/creditOrDebit": "CreditorDebitCardPOS",
            "card/gift": "MerchantClosedLoopGiftCardPOS",
            "card/ebt": "EBTCardPOS",
            "card/ewic": "EWICCard",
            "token/omni": "WorldPayOmniTokenSecurityToken",
            "token/pass": "WorldPayPassSecurityToken"
          }
        }
      },
      "SchemeSpecificData": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/VisaSchemeSpecificData"
          },
          {
            "$ref": "#/components/schemas/MastercardSchemeSpecificData"
          },
          {
            "$ref": "#/components/schemas/DiscoverSchemeSpecificData"
          },
          {
            "$ref": "#/components/schemas/AmExSchemeSpecificData"
          },
          {
            "$ref": "#/components/schemas/EbtSchemeSpecificData"
          }
        ],
        "description": "(RAFT ONLY) Information retruned from the Scheme that processed the transaction.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "schemeSpecifidData/visa": "VisaSchemeSpecificData",
            "schemeSpecifidData/mastercard": "MastercardSchemeSpecificData",
            "schemeSpecifidData/discover": "DiscoverSchemeSpecificData",
            "schemeSpecifidData/amex": "AmExSchemeSpecificData",
            "schemeSpecifidData/ebt": "EbtSchemeSpecificData"
          }
        }
      },
      "TokenData": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorldPayOmniTokenSecurityToken"
          },
          {
            "$ref": "#/components/schemas/WorldPayPassSecurityToken"
          }
        ],
        "description": "Response token (PaymentMethod) to use in future payments.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "token/omni": "WorldPayOmniTokenSecurityToken",
            "token/pass": "WorldPayPassSecurityToken"
          }
        }
      },
      "ValueAddedServices": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/VASAssured"
          },
          {
            "$ref": "#/components/schemas/VASFraudsight"
          }
        ],
        "description": "A collection of optional Value Added Services requested",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "assured": "VASAssured",
            "fraudsight": "VASFraudsight"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "X-API-KEY",
        "in": "header"
      },
      "JWTBearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "jwt"
      }
    }
  },
  "security": [],
  "tags": [
    {
      "name": "Payments",
      "description": "Payment transactions for all Payment Methods (Cards, Tokens, Wallets, Checks, APMs)"
    },
    {
      "name": "Tokens",
      "description": "Standalone WorldPay Security Token functions"
    },
    {
      "name": "Inquiries",
      "description": "Inquiry functions"
    }
  ]
}